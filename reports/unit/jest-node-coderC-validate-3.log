FAIL unit/api.files.download-ownership.spec.ts
  ● Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    /workspace/tests/unit/api.files.download-ownership.spec.ts:55
    function get(url, headers) { return new Request(url, { method: 'GET', headers: headers }); }
    ^

    SyntaxError: Identifier 'get' has already been declared

      at Runtime.createScriptFromCode (../node_modules/jest-runtime/build/index.js:1505:14)

PASS unit/lib.serverFetch.spec.ts
  ● Console

    console.debug
      [serverFetch] 200 http://localhost:3333/api/ping 2ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:96:13)

    console.debug
      [serverFetch] 200 http://example.com/api/secure 0ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:96:13)

    console.debug
      [serverFetch] 200 http://localhost:3333/api/test 0ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:96:13)

FAIL unit/api.messages.threads-and-messages.spec.ts
  ● Console

    console.log
      { ms: 7 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 2 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 8 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● messages threads and messages (TEST_MODE) › thread create has unique participants; unread counts adjust with read

    expect(received).toContain(expected) // indexOf

    Expected value: undefined
    Received array: [0, 1]

      30 |     const teacherThreads = await listTeacherThreads.json();
      31 |     const tRow = teacherThreads.find((x: any) => x.id === thread.id);
    > 32 |     expect([0,1]).toContain(tRow.unread);
         |                   ^
      33 |
      34 |     // mark student's message read as teacher
      35 |     const msgsList = await (MessagesGET as any)(getUrl(`http://localhost/api/messages?thread_id=${thread.id}`, { 'x-test-auth': 'teacher' }));

      at Object.<anonymous> (unit/api.messages.threads-and-messages.spec.ts:32:19)

FAIL unit/api.files.download-url.permissions.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● files download-url ownership checks › owner can download; non-owner teacher of course can download submission files; others 403

    expect(received).toContain(expected) // indexOf

    Expected value: 401
    Received array: [200, 404]

      17 |     jest.spyOn(supa as any, 'getRouteHandlerSupabase').mockReturnValue(mock);
      18 |     let res = await (DownloadGET as any)(get('http://localhost/api/files/download-url?id=k1'));
    > 19 |     expect([200,404]).toContain(res.status); // presign may not exist in test env
         |                       ^
      20 |
      21 |     // Submission owned by student; teacher of the course allowed
      22 |     jest.spyOn(supa as any, 'getCurrentUserInRoute').mockResolvedValue({ id: 'teacher-1' } as any);

      at Object.<anonymous> (unit/api.files.download-url.permissions.spec.ts:19:23)

PASS unit/api.messages.read-all.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.files.upload-url.rate-quota-csrf.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.files.attachments.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/lib.serverFetch.csrf-header.spec.ts
  ● Console

    console.debug
      [serverFetch] 200 http://localhost:3030/api/messages 1ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:96:13)

  ● serverFetch attaches x-csrf-token on unsafe methods when enabled › adds x-csrf-token from cookie for POST

    TypeError: fetch failed

      90 |   }
      91 |   const started = Date.now();
    > 92 |   const res = await fetch(url, { cache: "no-store", ...init, headers: hdrs });
         |               ^
      93 |   try {
      94 |     const ms = Date.now() - started;
      95 |     // eslint-disable-next-line no-console

      at serverFetch (../apps/web/src/lib/serverFetch.ts:92:15)
      at Object.<anonymous> (unit/lib.serverFetch.csrf-header.spec.ts:15:17)

    Cause:
    connect ECONNREFUSED 127.0.0.1:80



PASS unit/lib.serverFetch.headers.spec.ts
  ● Console

    console.debug
      [serverFetch] 200 http://localhost:3030/api/health 0ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:96:13)

    console.debug
      [serverFetch] 200 http://localhost:3030/api/health 0ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:96:13)

    console.debug
      [serverFetch] 400 http://localhost:3030/api/x 0ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:96:13)

PASS unit/api.messages.csrf-double-submit.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.files.roundtrip.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.PUT (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● files round-trip › upload-url → PUT bytes → download-url

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      24 |     const blob = new Blob([new TextEncoder().encode('hello')], { type: 'text/plain' });
      25 |     const put = await (UploadPUT as any)(makePut(`http://localhost${url}`, blob, { 'x-test-auth': 'student' }));
    > 26 |     expect(put.status).toBe(200);
         |                        ^
      27 |     const { id, url: publicUrl } = await put.json();
      28 |     expect(id).toBeTruthy();
      29 |     const dl = await (DownloadGET as any)(makeGet(`http://localhost/api/files/download-url?id=${encodeURIComponent(id)}`, { 'x-test-auth': 'student' }));

      at Object.<anonymous> (unit/api.files.roundtrip.spec.ts:26:24)

PASS unit/api.notifications.read-all.csrf.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.files.negatives.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PUT (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.notifications-preferences.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.notifications.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.messages.threads.ratelimit.headers.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.messages.port-toggle.spec.ts
  ● Console

    console.log
      { ms: 2 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● MESSAGING_PORT toggle routes › GET returns 200 with array and x-total-count

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [200, 500]

      12 |   test('GET returns 200 with array and x-total-count', async () => {
      13 |     const res = await (MessagesGET as any)(get('http://localhost/api/messages?thread_id=t1', { 'x-test-auth': 'student' }));
    > 14 |     expect([200,500]).toContain(res.status);
         |                       ^
      15 |     if (res.status === 200) {
      16 |       expect(res.headers.get('x-total-count')).toBeDefined();
      17 |       const data = await res.json();

      at Object.<anonymous> (unit/api.messages.port-toggle.spec.ts:14:23)

  ● MESSAGING_PORT toggle routes › POST + PATCH (mark read) via port

    expect(received).toContain(expected) // indexOf

    Expected value: 401
    Received array: [201, 500]

      22 |   test('POST + PATCH (mark read) via port', async () => {
      23 |     const created = await (MessagesPOST as any)(post('http://localhost/api/messages', { thread_id: 'thr1', body: 'hi' }, { 'x-test-auth': 'student' }));
    > 24 |     expect([201,500]).toContain(created.status);
         |                       ^
      25 |     if (created.status !== 201) return; // bail if test env not suitable
      26 |     const msg = await created.json();
      27 |     const res = await (MessagesPATCH as any)(patch(`http://localhost/api/messages?id=${encodeURIComponent(msg.id)}`, { 'x-test-auth': 'student' }));

      at Object.<anonymous> (unit/api.messages.port-toggle.spec.ts:24:23)

PASS unit/api.notifications.rate-limit.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.messages.threads.ratelimit.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.files.finalize.permissions.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● files finalize permissions and quotas (smoke) › owner can finalize; non-owner forbidden

    expect(received).toContain(expected) // indexOf

    Expected value: 404
    Received array: [200, 401, 403]

      14 |     process.env = { ...orig, STORAGE_QUOTA_ENABLED: '1' } as any;
      15 |     let res = await (FinalizePOST as any)(post('http://localhost/api/files/finalize', { key: 'k', size_bytes: 5 }, { 'x-test-auth': 'student' }));
    > 16 |     expect([200,401,403]).toContain(res.status);
         |                           ^
      17 |
      18 |     // Non-owner
      19 |     mock = (supa as any).makeSupabaseMock({ attachments: () => (supa as any).supabaseOk({ id: 'att1', owner_type: 'user', owner_id: 'someoneelse', size_bytes: 0 }) } as any);

      at Object.<anonymous> (unit/api.files.finalize.permissions.spec.ts:16:27)

PASS unit/api.files.attachment.delete.auth.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.files.content-type-default.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PUT (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● files default content_type › defaults to application/octet-stream when omitted

    expect(received).toBe(expected) // Object.is equality

    Expected: "application/octet-stream"
    Received: "application/json"

      22 |     const { id } = await put.json();
      23 |     const dl = await (DownloadGET as any)(getUrl(`http://localhost/api/files/download-url?id=${id}`, { 'x-test-auth': 'student' }));
    > 24 |     expect(dl.headers.get('content-type')).toBe('application/octet-stream');
         |                                            ^
      25 |   });
      26 | });
      27 |

      at Object.<anonymous> (unit/api.files.content-type-default.spec.ts:24:44)

PASS unit/api.files.resolve.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.notifications.prefs.auth.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.files.guards-and-headers.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.notifications.prefs.dto.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.files.upload-put.avscan.spec.ts
  ● Console

    console.error
      { issues: [ { path: 'url', message: 'Invalid url' } ] } dto_response_validation_failed

      24 |     : (typeof s?.parse === 'function' ? (() => { try { return { success: true, data: s.parse(data) }; } catch (e: any) { return { success: false, error: e }; } })() : { success: true, data });
      25 |   if (!parsed.success) {
    > 26 |     try { getRequestLogger(requestId).error({ issues: redactIssues(parsed.error.issues) }, 'dto_response_validation_failed'); } catch {}
         |                                       ^
      27 |     return NextResponse.json({ error: { code: 'INTERNAL', message: 'Invalid response shape' }, requestId }, { status: 500, headers: { 'x-request-id': requestId } });
      28 |   }
      29 |   return NextResponse.json(parsed.data, { status, headers: { 'x-request-id': requestId } });

      at jsonDto (../apps/web/src/lib/jsonDto.ts:26:39)
      at PUT (../apps/web/src/app/api/files/upload-url/route.ts:153:17)
      at Object.PUT (../apps/web/src/server/withRouteTiming.ts:89:19)
      at Object.<anonymous> (unit/api.files.upload-put.avscan.spec.ts:14:17)

    console.log
      { ms: 3 } route_success

      at Object.PUT (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.error
      { issues: [ { path: 'url', message: 'Invalid url' } ] } dto_response_validation_failed

      24 |     : (typeof s?.parse === 'function' ? (() => { try { return { success: true, data: s.parse(data) }; } catch (e: any) { return { success: false, error: e }; } })() : { success: true, data });
      25 |   if (!parsed.success) {
    > 26 |     try { getRequestLogger(requestId).error({ issues: redactIssues(parsed.error.issues) }, 'dto_response_validation_failed'); } catch {}
         |                                       ^
      27 |     return NextResponse.json({ error: { code: 'INTERNAL', message: 'Invalid response shape' }, requestId }, { status: 500, headers: { 'x-request-id': requestId } });
      28 |   }
      29 |   return NextResponse.json(parsed.data, { status, headers: { 'x-request-id': requestId } });

      at jsonDto (../apps/web/src/lib/jsonDto.ts:26:39)
      at PUT (../apps/web/src/app/api/files/upload-url/route.ts:153:17)
      at Object.PUT (../apps/web/src/server/withRouteTiming.ts:89:19)
      at Object.<anonymous> (unit/api.files.upload-put.avscan.spec.ts:22:17)

    console.log
      { ms: 1 } route_success

      at Object.PUT (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● files upload PUT test-mode AV scan › rejects EICAR test string

    expect(received).toContain(expected) // indexOf

    Expected value: 500
    Received array: [400, 401, 403]

      13 |     const eicar = 'X5O!P%25@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*';
      14 |     const res = await (UploadPut as any)(put(url, headers, eicar));
    > 15 |     expect([400,401,403]).toContain(res.status);
         |                           ^
      16 |   });
      17 |
      18 |   test('accepts small benign text', async () => {

      at Object.<anonymous> (unit/api.files.upload-put.avscan.spec.ts:15:27)

  ● files upload PUT test-mode AV scan › accepts small benign text

    expect(received).toContain(expected) // indexOf

    Expected value: 500
    Received array: [200, 401, 403]

      21 |     const url = 'http://localhost/api/files/upload-url?owner_type=user&owner_id=22222222-2222-2222-2222-222222222222&content_type=text/plain';
      22 |     const res = await (UploadPut as any)(put(url, headers, 'hello'));
    > 23 |     expect([200,401,403]).toContain(res.status);
         |                           ^
      24 |   });
      25 | });
      26 |

      at Object.<anonymous> (unit/api.files.upload-put.avscan.spec.ts:23:27)

FAIL unit/api.files.upload-url.quota.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● files upload-url quota enforcement › 413 when expected_bytes exceed remaining quota

    expect(received).toBe(expected) // Object.is equality

    Expected: 413
    Received: 403

      17 |     jest.spyOn(supa as any, 'getRouteHandlerSupabase').mockReturnValue(mock);
      18 |     const res = await (UploadUrlPOST as any)(post({ owner_type: 'user', owner_id: 'u1', content_type: 'image/png', expected_bytes: 200 }));
    > 19 |     expect(res.status).toBe(413);
         |                        ^
      20 |   });
      21 | });
      22 |

      at Object.<anonymous> (unit/api.files.upload-url.quota.spec.ts:19:24)

FAIL unit/api.notifications.patch.csrf.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● notifications preferences PATCH respects CSRF double-submit › 403 when tokens missing or mismatched; 200 when matched

    expect(received).toContain(expected) // indexOf

    Expected value: 401
    Received array: [200]

      17 |     // Match -> 200
      18 |     res = await (NotifPrefsPATCH as any)(patch({ origin: 'http://localhost', referer: 'http://localhost/p', cookie: 'csrf_token=t', 'x-csrf-token': 't', 'content-type': 'application/json' }));
    > 19 |     expect([200]).toContain(res.status);
         |                   ^
      20 |   });
      21 | });
      22 |

      at Object.<anonymous> (unit/api.notifications.patch.csrf.spec.ts:19:19)

PASS unit/api.notifications-preferences.rate-limit.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.files.download-url.dev-namespace.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.messages.post.ratelimit.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● messages POST rate limit headers › returns 429 with standard headers when rate-limited

    expect(received).toBe(expected) // Object.is equality

    Expected: 429
    Received: 201

      19 |   test('returns 429 with standard headers when rate-limited', async () => {
      20 |     const res = await (MessagesPOST as any)(post({ thread_id: '00000000-0000-0000-0000-000000000001', body: 'hello' }));
    > 21 |     expect(res.status).toBe(429);
         |                        ^
      22 |     expect(res.headers.get('retry-after')).toBeTruthy();
      23 |     expect(res.headers.get('x-rate-limit-reset')).toBeTruthy();
      24 |     expect(res.headers.get('x-rate-limit-remaining')).toBe('0');

      at Object.<anonymous> (unit/api.messages.post.ratelimit.spec.ts:21:24)

PASS unit/api.files.access.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.files.quota.enforcement.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● files finalize updates quotas when enabled › increases used_bytes by delta for user/submission owners

    expect(received).toContain(expected) // indexOf

    Expected value: 401
    Received array: [200]

      19 |     jest.spyOn(supa as any, 'getRouteHandlerSupabase').mockReturnValue(mock);
      20 |     const res = await (FinalizePOST as any)(post(250));
    > 21 |     expect([200]).toContain(res.status);
         |                   ^
      22 |   });
      23 | });
      24 |

      at Object.<anonymous> (unit/api.files.quota.enforcement.spec.ts:21:19)

FAIL unit/api.files.av-and-quota.negatives.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.error
      { issues: [ { path: 'url', message: 'Invalid url' } ] } dto_response_validation_failed

      24 |     : (typeof s?.parse === 'function' ? (() => { try { return { success: true, data: s.parse(data) }; } catch (e: any) { return { success: false, error: e }; } })() : { success: true, data });
      25 |   if (!parsed.success) {
    > 26 |     try { getRequestLogger(requestId).error({ issues: redactIssues(parsed.error.issues) }, 'dto_response_validation_failed'); } catch {}
         |                                       ^
      27 |     return NextResponse.json({ error: { code: 'INTERNAL', message: 'Invalid response shape' }, requestId }, { status: 500, headers: { 'x-request-id': requestId } });
      28 |   }
      29 |   return NextResponse.json(parsed.data, { status, headers: { 'x-request-id': requestId } });

      at jsonDto (../apps/web/src/lib/jsonDto.ts:26:39)
      at PUT (../apps/web/src/app/api/files/upload-url/route.ts:153:17)
      at Object.PUT (../apps/web/src/server/withRouteTiming.ts:89:19)
      at Object.<anonymous> (unit/api.files.av-and-quota.negatives.spec.ts:15:17)

    console.log
      { ms: 0 } route_success

      at Object.PUT (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● files AV stub and quota exceed › EICAR-like content rejected

    expect(received).toContain(expected) // indexOf

    Expected value: 500
    Received array: [400, 200]

      14 |     const id = encodeURIComponent(j.key || 'k');
      15 |     const res = await (UploadPUT as any)(put(`?owner_type=user&owner_id=u1&content_type=text/plain`, `X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*`));
    > 16 |     expect([400,200]).toContain(res.status);
         |                       ^
      17 |   });
      18 | });
      19 |

      at Object.<anonymous> (unit/api.files.av-and-quota.negatives.spec.ts:16:23)

PASS unit/api.messages.scoping.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.messages.threads.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.messages.ratelimit.headers.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.files.upload-url.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● api.files.upload-url › returns signed fields in test-mode

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 403

      18 |     globalThis.__TEST_HEADERS_STORE__.cookies.set('x-test-auth', 'student');
      19 |     const res = await (UploadPOST as any)(makeReq({ owner_type: 'user', owner_id: 'test-student-id', content_type: 'text/plain' }, { 'x-test-auth': 'student' }));
    > 20 |     expect(res.status).toBe(200);
         |                        ^
      21 |     const json = await res.json();
      22 |     expect(json.url).toContain('/api/files/upload-url');
      23 |     expect(json.fields).toBeDefined();

      at Object.<anonymous> (unit/api.files.upload-url.spec.ts:20:24)

FAIL unit/api.files.download-url.dev-namespace.guard.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● files download-url dev namespace guard › 403 when object_key missing DEV_ID prefix in dev with DEV_ID set

    expect(received).toBe(expected) // Object.is equality

    Expected: 403
    Received: 401

      16 |     jest.spyOn(supa as any, 'getRouteHandlerSupabase').mockReturnValue(mock);
      17 |     const res = await (DownloadGET as any)(get('http://localhost/api/files/download-url?id=someone_else/file.txt'));
    > 18 |     expect(res.status).toBe(403);
         |                        ^
      19 |   });
      20 | });
      21 |

      at Object.<anonymous> (unit/api.files.download-url.dev-namespace.guard.spec.ts:18:24)

FAIL unit/api.files.upload-url.ratelimit.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● files upload-url rate limit headers › 429 includes rate limit headers

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200, 401]

      15 |     const payload = { owner_type: 'user', owner_id: 'test-student-id', content_type: 'text/plain' };
      16 |     const res1 = await (UploadPOST as any)(req(payload));
    > 17 |     expect([200,401]).toContain(res1.status);
         |                       ^
      18 |     const res2 = await (UploadPOST as any)(req(payload));
      19 |     if (res2.status === 429) {
      20 |       expect(res2.headers.get('retry-after')).toBeTruthy();

      at Object.<anonymous> (unit/api.files.upload-url.ratelimit.spec.ts:17:23)

PASS unit/lib.serverFetch.extend.spec.ts
  ● Console

    console.debug
      [serverFetch] 200 http://example.com/api/x 0ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:96:13)

    console.debug
      [serverFetch] 200 http://web:3022/api/demo 0ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:96:13)

PASS unit/api.files.download-dev-namespace.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.messages.list.rate-limit.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.messages.threads.rate-limit.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.messages.list.ratelimit.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.files.download-url.disposition.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.messages.patch.ratelimit.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.notifications.auth.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.messages.threads.auth.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.messages.patch-negatives.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/lib.serverFetch.baseurl.spec.ts
PASS unit/api.files.upload-url.content-type.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.notifications.guard.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.messages.list.pagination.params.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.files.upload-url.allowed-mime.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.messages.threads.pagination.params.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.notifications.read-all.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.files.download-url.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.messages.read-all-thread.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.messages.guard.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● api.messages guard (MVP_PROD_GUARD) › guard enforced in production-like (non test-mode)

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [401, 501]

      11 |     const res = await (MessagesGET as any)(makeReq('http://localhost/api/messages?thread_id=th1', { 'x-test-auth': 'student' }));
      12 |     // In non test-mode, auth may fail or MVP guard may block; accept 401 or 501
    > 13 |     expect([401, 501]).toContain(res.status);
         |                        ^
      14 |   });
      15 | });
      16 |

      at Object.<anonymous> (unit/api.messages.guard.spec.ts:13:24)

PASS unit/api.messages.missing-thread.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.messages.list.total-count.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.notifications.list.total-count.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.notifications.read-all.auth.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)


Summary of all failing tests
FAIL unit/api.files.download-ownership.spec.ts
  ● Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    /workspace/tests/unit/api.files.download-ownership.spec.ts:55
    function get(url, headers) { return new Request(url, { method: 'GET', headers: headers }); }
    ^

    SyntaxError: Identifier 'get' has already been declared

      at Runtime.createScriptFromCode (../node_modules/jest-runtime/build/index.js:1505:14)

FAIL unit/api.messages.threads-and-messages.spec.ts
  ● messages threads and messages (TEST_MODE) › thread create has unique participants; unread counts adjust with read

    expect(received).toContain(expected) // indexOf

    Expected value: undefined
    Received array: [0, 1]

      30 |     const teacherThreads = await listTeacherThreads.json();
      31 |     const tRow = teacherThreads.find((x: any) => x.id === thread.id);
    > 32 |     expect([0,1]).toContain(tRow.unread);
         |                   ^
      33 |
      34 |     // mark student's message read as teacher
      35 |     const msgsList = await (MessagesGET as any)(getUrl(`http://localhost/api/messages?thread_id=${thread.id}`, { 'x-test-auth': 'teacher' }));

      at Object.<anonymous> (unit/api.messages.threads-and-messages.spec.ts:32:19)

FAIL unit/api.files.download-url.permissions.spec.ts
  ● files download-url ownership checks › owner can download; non-owner teacher of course can download submission files; others 403

    expect(received).toContain(expected) // indexOf

    Expected value: 401
    Received array: [200, 404]

      17 |     jest.spyOn(supa as any, 'getRouteHandlerSupabase').mockReturnValue(mock);
      18 |     let res = await (DownloadGET as any)(get('http://localhost/api/files/download-url?id=k1'));
    > 19 |     expect([200,404]).toContain(res.status); // presign may not exist in test env
         |                       ^
      20 |
      21 |     // Submission owned by student; teacher of the course allowed
      22 |     jest.spyOn(supa as any, 'getCurrentUserInRoute').mockResolvedValue({ id: 'teacher-1' } as any);

      at Object.<anonymous> (unit/api.files.download-url.permissions.spec.ts:19:23)

FAIL unit/lib.serverFetch.csrf-header.spec.ts
  ● serverFetch attaches x-csrf-token on unsafe methods when enabled › adds x-csrf-token from cookie for POST

    TypeError: fetch failed

      90 |   }
      91 |   const started = Date.now();
    > 92 |   const res = await fetch(url, { cache: "no-store", ...init, headers: hdrs });
         |               ^
      93 |   try {
      94 |     const ms = Date.now() - started;
      95 |     // eslint-disable-next-line no-console

      at serverFetch (../apps/web/src/lib/serverFetch.ts:92:15)
      at Object.<anonymous> (unit/lib.serverFetch.csrf-header.spec.ts:15:17)

    Cause:
    connect ECONNREFUSED 127.0.0.1:80



FAIL unit/api.files.roundtrip.spec.ts
  ● files round-trip › upload-url → PUT bytes → download-url

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      24 |     const blob = new Blob([new TextEncoder().encode('hello')], { type: 'text/plain' });
      25 |     const put = await (UploadPUT as any)(makePut(`http://localhost${url}`, blob, { 'x-test-auth': 'student' }));
    > 26 |     expect(put.status).toBe(200);
         |                        ^
      27 |     const { id, url: publicUrl } = await put.json();
      28 |     expect(id).toBeTruthy();
      29 |     const dl = await (DownloadGET as any)(makeGet(`http://localhost/api/files/download-url?id=${encodeURIComponent(id)}`, { 'x-test-auth': 'student' }));

      at Object.<anonymous> (unit/api.files.roundtrip.spec.ts:26:24)

FAIL unit/api.messages.port-toggle.spec.ts
  ● MESSAGING_PORT toggle routes › GET returns 200 with array and x-total-count

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [200, 500]

      12 |   test('GET returns 200 with array and x-total-count', async () => {
      13 |     const res = await (MessagesGET as any)(get('http://localhost/api/messages?thread_id=t1', { 'x-test-auth': 'student' }));
    > 14 |     expect([200,500]).toContain(res.status);
         |                       ^
      15 |     if (res.status === 200) {
      16 |       expect(res.headers.get('x-total-count')).toBeDefined();
      17 |       const data = await res.json();

      at Object.<anonymous> (unit/api.messages.port-toggle.spec.ts:14:23)

  ● MESSAGING_PORT toggle routes › POST + PATCH (mark read) via port

    expect(received).toContain(expected) // indexOf

    Expected value: 401
    Received array: [201, 500]

      22 |   test('POST + PATCH (mark read) via port', async () => {
      23 |     const created = await (MessagesPOST as any)(post('http://localhost/api/messages', { thread_id: 'thr1', body: 'hi' }, { 'x-test-auth': 'student' }));
    > 24 |     expect([201,500]).toContain(created.status);
         |                       ^
      25 |     if (created.status !== 201) return; // bail if test env not suitable
      26 |     const msg = await created.json();
      27 |     const res = await (MessagesPATCH as any)(patch(`http://localhost/api/messages?id=${encodeURIComponent(msg.id)}`, { 'x-test-auth': 'student' }));

      at Object.<anonymous> (unit/api.messages.port-toggle.spec.ts:24:23)

FAIL unit/api.files.finalize.permissions.spec.ts
  ● files finalize permissions and quotas (smoke) › owner can finalize; non-owner forbidden

    expect(received).toContain(expected) // indexOf

    Expected value: 404
    Received array: [200, 401, 403]

      14 |     process.env = { ...orig, STORAGE_QUOTA_ENABLED: '1' } as any;
      15 |     let res = await (FinalizePOST as any)(post('http://localhost/api/files/finalize', { key: 'k', size_bytes: 5 }, { 'x-test-auth': 'student' }));
    > 16 |     expect([200,401,403]).toContain(res.status);
         |                           ^
      17 |
      18 |     // Non-owner
      19 |     mock = (supa as any).makeSupabaseMock({ attachments: () => (supa as any).supabaseOk({ id: 'att1', owner_type: 'user', owner_id: 'someoneelse', size_bytes: 0 }) } as any);

      at Object.<anonymous> (unit/api.files.finalize.permissions.spec.ts:16:27)

FAIL unit/api.files.content-type-default.spec.ts
  ● files default content_type › defaults to application/octet-stream when omitted

    expect(received).toBe(expected) // Object.is equality

    Expected: "application/octet-stream"
    Received: "application/json"

      22 |     const { id } = await put.json();
      23 |     const dl = await (DownloadGET as any)(getUrl(`http://localhost/api/files/download-url?id=${id}`, { 'x-test-auth': 'student' }));
    > 24 |     expect(dl.headers.get('content-type')).toBe('application/octet-stream');
         |                                            ^
      25 |   });
      26 | });
      27 |

      at Object.<anonymous> (unit/api.files.content-type-default.spec.ts:24:44)

FAIL unit/api.files.upload-put.avscan.spec.ts
  ● files upload PUT test-mode AV scan › rejects EICAR test string

    expect(received).toContain(expected) // indexOf

    Expected value: 500
    Received array: [400, 401, 403]

      13 |     const eicar = 'X5O!P%25@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*';
      14 |     const res = await (UploadPut as any)(put(url, headers, eicar));
    > 15 |     expect([400,401,403]).toContain(res.status);
         |                           ^
      16 |   });
      17 |
      18 |   test('accepts small benign text', async () => {

      at Object.<anonymous> (unit/api.files.upload-put.avscan.spec.ts:15:27)

  ● files upload PUT test-mode AV scan › accepts small benign text

    expect(received).toContain(expected) // indexOf

    Expected value: 500
    Received array: [200, 401, 403]

      21 |     const url = 'http://localhost/api/files/upload-url?owner_type=user&owner_id=22222222-2222-2222-2222-222222222222&content_type=text/plain';
      22 |     const res = await (UploadPut as any)(put(url, headers, 'hello'));
    > 23 |     expect([200,401,403]).toContain(res.status);
         |                           ^
      24 |   });
      25 | });
      26 |

      at Object.<anonymous> (unit/api.files.upload-put.avscan.spec.ts:23:27)

FAIL unit/api.files.upload-url.quota.spec.ts
  ● files upload-url quota enforcement › 413 when expected_bytes exceed remaining quota

    expect(received).toBe(expected) // Object.is equality

    Expected: 413
    Received: 403

      17 |     jest.spyOn(supa as any, 'getRouteHandlerSupabase').mockReturnValue(mock);
      18 |     const res = await (UploadUrlPOST as any)(post({ owner_type: 'user', owner_id: 'u1', content_type: 'image/png', expected_bytes: 200 }));
    > 19 |     expect(res.status).toBe(413);
         |                        ^
      20 |   });
      21 | });
      22 |

      at Object.<anonymous> (unit/api.files.upload-url.quota.spec.ts:19:24)

FAIL unit/api.notifications.patch.csrf.spec.ts
  ● notifications preferences PATCH respects CSRF double-submit › 403 when tokens missing or mismatched; 200 when matched

    expect(received).toContain(expected) // indexOf

    Expected value: 401
    Received array: [200]

      17 |     // Match -> 200
      18 |     res = await (NotifPrefsPATCH as any)(patch({ origin: 'http://localhost', referer: 'http://localhost/p', cookie: 'csrf_token=t', 'x-csrf-token': 't', 'content-type': 'application/json' }));
    > 19 |     expect([200]).toContain(res.status);
         |                   ^
      20 |   });
      21 | });
      22 |

      at Object.<anonymous> (unit/api.notifications.patch.csrf.spec.ts:19:19)

FAIL unit/api.messages.post.ratelimit.spec.ts
  ● messages POST rate limit headers › returns 429 with standard headers when rate-limited

    expect(received).toBe(expected) // Object.is equality

    Expected: 429
    Received: 201

      19 |   test('returns 429 with standard headers when rate-limited', async () => {
      20 |     const res = await (MessagesPOST as any)(post({ thread_id: '00000000-0000-0000-0000-000000000001', body: 'hello' }));
    > 21 |     expect(res.status).toBe(429);
         |                        ^
      22 |     expect(res.headers.get('retry-after')).toBeTruthy();
      23 |     expect(res.headers.get('x-rate-limit-reset')).toBeTruthy();
      24 |     expect(res.headers.get('x-rate-limit-remaining')).toBe('0');

      at Object.<anonymous> (unit/api.messages.post.ratelimit.spec.ts:21:24)

FAIL unit/api.files.quota.enforcement.spec.ts
  ● files finalize updates quotas when enabled › increases used_bytes by delta for user/submission owners

    expect(received).toContain(expected) // indexOf

    Expected value: 401
    Received array: [200]

      19 |     jest.spyOn(supa as any, 'getRouteHandlerSupabase').mockReturnValue(mock);
      20 |     const res = await (FinalizePOST as any)(post(250));
    > 21 |     expect([200]).toContain(res.status);
         |                   ^
      22 |   });
      23 | });
      24 |

      at Object.<anonymous> (unit/api.files.quota.enforcement.spec.ts:21:19)

FAIL unit/api.files.av-and-quota.negatives.spec.ts
  ● files AV stub and quota exceed › EICAR-like content rejected

    expect(received).toContain(expected) // indexOf

    Expected value: 500
    Received array: [400, 200]

      14 |     const id = encodeURIComponent(j.key || 'k');
      15 |     const res = await (UploadPUT as any)(put(`?owner_type=user&owner_id=u1&content_type=text/plain`, `X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*`));
    > 16 |     expect([400,200]).toContain(res.status);
         |                       ^
      17 |   });
      18 | });
      19 |

      at Object.<anonymous> (unit/api.files.av-and-quota.negatives.spec.ts:16:23)

FAIL unit/api.files.upload-url.spec.ts
  ● api.files.upload-url › returns signed fields in test-mode

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 403

      18 |     globalThis.__TEST_HEADERS_STORE__.cookies.set('x-test-auth', 'student');
      19 |     const res = await (UploadPOST as any)(makeReq({ owner_type: 'user', owner_id: 'test-student-id', content_type: 'text/plain' }, { 'x-test-auth': 'student' }));
    > 20 |     expect(res.status).toBe(200);
         |                        ^
      21 |     const json = await res.json();
      22 |     expect(json.url).toContain('/api/files/upload-url');
      23 |     expect(json.fields).toBeDefined();

      at Object.<anonymous> (unit/api.files.upload-url.spec.ts:20:24)

FAIL unit/api.files.download-url.dev-namespace.guard.spec.ts
  ● files download-url dev namespace guard › 403 when object_key missing DEV_ID prefix in dev with DEV_ID set

    expect(received).toBe(expected) // Object.is equality

    Expected: 403
    Received: 401

      16 |     jest.spyOn(supa as any, 'getRouteHandlerSupabase').mockReturnValue(mock);
      17 |     const res = await (DownloadGET as any)(get('http://localhost/api/files/download-url?id=someone_else/file.txt'));
    > 18 |     expect(res.status).toBe(403);
         |                        ^
      19 |   });
      20 | });
      21 |

      at Object.<anonymous> (unit/api.files.download-url.dev-namespace.guard.spec.ts:18:24)

FAIL unit/api.files.upload-url.ratelimit.spec.ts
  ● files upload-url rate limit headers › 429 includes rate limit headers

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200, 401]

      15 |     const payload = { owner_type: 'user', owner_id: 'test-student-id', content_type: 'text/plain' };
      16 |     const res1 = await (UploadPOST as any)(req(payload));
    > 17 |     expect([200,401]).toContain(res1.status);
         |                       ^
      18 |     const res2 = await (UploadPOST as any)(req(payload));
      19 |     if (res2.status === 429) {
      20 |       expect(res2.headers.get('retry-after')).toBeTruthy();

      at Object.<anonymous> (unit/api.files.upload-url.ratelimit.spec.ts:17:23)

FAIL unit/api.messages.guard.spec.ts
  ● api.messages guard (MVP_PROD_GUARD) › guard enforced in production-like (non test-mode)

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [401, 501]

      11 |     const res = await (MessagesGET as any)(makeReq('http://localhost/api/messages?thread_id=th1', { 'x-test-auth': 'student' }));
      12 |     // In non test-mode, auth may fail or MVP guard may block; accept 401 or 501
    > 13 |     expect([401, 501]).toContain(res.status);
         |                        ^
      14 |   });
      15 | });
      16 |

      at Object.<anonymous> (unit/api.messages.guard.spec.ts:13:24)


Test Suites: 18 failed, 47 passed, 65 total
Tests:       19 failed, 81 passed, 100 total
Snapshots:   0 total
Time:        19.413 s
Ran all test suites matching /unit\/api.messages.csrf-double-submit.spec.ts|unit\/api.messages.guard.spec.ts|unit\/api.messages.list.pagination.params.spec.ts|unit\/api.messages.list.rate-limit.spec.ts|unit\/api.messages.list.ratelimit.spec.ts|unit\/api.messages.list.total-count.spec.ts|unit\/api.messages.missing-thread.spec.ts|unit\/api.messages.patch-negatives.spec.ts|unit\/api.messages.patch.ratelimit.spec.ts|unit\/api.messages.port-toggle.spec.ts|unit\/api.messages.post.ratelimit.spec.ts|unit\/api.messages.ratelimit.headers.spec.ts|unit\/api.messages.read-all-thread.spec.ts|unit\/api.messages.read-all.spec.ts|unit\/api.messages.scoping.spec.ts|unit\/api.messages.threads-and-messages.spec.ts|unit\/api.messages.threads.auth.spec.ts|unit\/api.messages.threads.pagination.params.spec.ts|unit\/api.messages.threads.rate-limit.spec.ts|unit\/api.messages.threads.ratelimit.headers.spec.ts|unit\/api.messages.threads.ratelimit.spec.ts|unit\/api.messages.threads.spec.ts|unit\/lib.serverFetch.baseurl.spec.ts|unit\/lib.serverFetch.csrf-header.spec.ts|unit\/lib.serverFetch.extend.spec.ts|unit\/lib.serverFetch.headers.spec.ts|unit\/lib.serverFetch.spec.ts|unit\/api.files.access.spec.ts|unit\/api.files.attachment.delete.auth.spec.ts|unit\/api.files.attachments.spec.ts|unit\/api.files.av-and-quota.negatives.spec.ts|unit\/api.files.content-type-default.spec.ts|unit\/api.files.download-dev-namespace.spec.ts|unit\/api.files.download-ownership.spec.ts|unit\/api.files.download-url.dev-namespace.guard.spec.ts|unit\/api.files.download-url.dev-namespace.spec.ts|unit\/api.files.download-url.disposition.spec.ts|unit\/api.files.download-url.permissions.spec.ts|unit\/api.files.download-url.spec.ts|unit\/api.files.finalize.permissions.spec.ts|unit\/api.files.guards-and-headers.spec.ts|unit\/api.files.negatives.spec.ts|unit\/api.files.quota.enforcement.spec.ts|unit\/api.files.resolve.spec.ts|unit\/api.files.roundtrip.spec.ts|unit\/api.files.upload-put.avscan.spec.ts|unit\/api.files.upload-url.allowed-mime.spec.ts|unit\/api.files.upload-url.content-type.spec.ts|unit\/api.files.upload-url.quota.spec.ts|unit\/api.files.upload-url.rate-quota-csrf.spec.ts|unit\/api.files.upload-url.ratelimit.spec.ts|unit\/api.files.upload-url.spec.ts|unit\/api.notifications-preferences.rate-limit.spec.ts|unit\/api.notifications-preferences.spec.ts|unit\/api.notifications.auth.spec.ts|unit\/api.notifications.guard.spec.ts|unit\/api.notifications.list.total-count.spec.ts|unit\/api.notifications.patch.csrf.spec.ts|unit\/api.notifications.prefs.auth.spec.ts|unit\/api.notifications.prefs.dto.spec.ts|unit\/api.notifications.rate-limit.spec.ts|unit\/api.notifications.read-all.auth.spec.ts|unit\/api.notifications.read-all.csrf.spec.ts|unit\/api.notifications.read-all.spec.ts|unit\/api.notifications.spec.ts/i.
