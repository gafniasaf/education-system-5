FAIL unit/future.messaging.spec.ts
  ● Console

    console.log
      { ms: 6 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 2 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 6 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 2 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● Epic E: Messaging (MVP) › marks message as read for the current user and updates unread badge

    TypeError: Cannot read properties of undefined (reading 'unread')

      78 |     const listRes = await threads.GET(new Request('http://localhost/api/messages/threads', { headers: { 'x-test-auth': 'student' } }) as any);
      79 |     const list = await listRes.json();
    > 80 |     expect(list[0].unread).toBe(0);
         |                    ^
      81 |   });
      82 |   test('enforces permissions: unauthenticated yields 401', async () => {
      83 |     // clear test auth

      at Object.<anonymous> (unit/future.messaging.spec.ts:80:20)

  ● Epic E: Messaging (MVP) › PATCH /api/messages/threads/[id]/read-all zeroes unread for current user

    TypeError: Cannot read properties of undefined (reading 'unread')

      110 |     const listRes = await threads.GET(new Request('http://localhost/api/messages/threads', { headers: { 'x-test-auth': 'student' } }) as any);
      111 |     const list = await listRes.json();
    > 112 |     expect(list[0].unread).toBe(0);
          |                    ^
      113 |   });
      114 |
      115 |   test('messages list sorted by created_at and unread increments after new message', async () => {

      at Object.<anonymous> (unit/future.messaging.spec.ts:112:20)

  ● Epic E: Messaging (MVP) › messages list sorted by created_at and unread increments after new message

    TypeError: Cannot read properties of undefined (reading 'unread')

      138 |     const listThreads = await threads.GET(new Request('http://localhost/api/messages/threads', { headers: { 'x-test-auth': 'student' } }) as any);
      139 |     const ts = await listThreads.json();
    > 140 |     expect(ts[0].unread).toBeGreaterThan(0);
          |                  ^
      141 |   });
      142 |
      143 |   test('PATCH /api/messages without id returns 400 and unknown id returns 404', async () => {

      at Object.<anonymous> (unit/future.messaging.spec.ts:140:18)

PASS unit/api.runtime.v2.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.flags.providers.users.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 2 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.PUT (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.reports.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/lib.runtimeAuth.spec.ts
FAIL unit/api.runtime.outcomes.rate-limit.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 33 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● runtime outcomes rate limiting (list + export) › list for course: third request -> 429 with headers

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200, 500]

      17 |     const h = { 'x-test-auth': 'teacher' } as Record<string, string>;
      18 |     const r1 = await (OutcomesListGET as any)(get(base, h));
    > 19 |     expect([200,500]).toContain(r1.status);
         |                       ^
      20 |     const r2 = await (OutcomesListGET as any)(get(base, h));
      21 |     expect([200,500]).toContain(r2.status);
      22 |     const r3 = await (OutcomesListGET as any)(get(base, h));

      at Object.<anonymous> (unit/api.runtime.outcomes.rate-limit.spec.ts:19:23)

  ● runtime outcomes rate limiting (list + export) › export for course: third request -> 429 with headers

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200, 500]

      35 |     const h = { 'x-test-auth': 'teacher' } as Record<string, string>;
      36 |     const r1 = await (OutcomesExportGET as any)(get(url, h));
    > 37 |     expect([200,500]).toContain(r1.status);
         |                       ^
      38 |     const r2 = await (OutcomesExportGET as any)(get(url, h));
      39 |     expect([200,500]).toContain(r2.status);
      40 |     const r3 = await (OutcomesExportGET as any)(get(url, h));

      at Object.<anonymous> (unit/api.runtime.outcomes.rate-limit.spec.ts:37:23)

  ● runtime outcomes rate-limit headers › 429 includes retry-after and rate-limit headers

    expect(received).toBe(expected) // Object.is equality

    Expected: 429
    Received: 403

      75 |     });
      76 |     const res = await (OutcomesPOST as any)(post('http://localhost/api/runtime/outcomes', { courseId: 'c1', userId: 'u1', event: { type: 'progress', pct: 10 } }, { authorization: 'Bearer good' }));
    > 77 |     expect(res.status).toBe(429);
         |                        ^
      78 |     expect(res.headers.get('retry-after')).toBeTruthy();
      79 |     expect(res.headers.get('x-rate-limit-remaining')).toBe('0');
      80 |     expect(res.headers.get('x-rate-limit-reset')).toBeTruthy();

      at Object.<anonymous> (unit/api.runtime.outcomes.rate-limit.spec.ts:77:24)

PASS unit/api.pagination.headers.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/future.notifications.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.registry.mutations.ratelimit.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/lib.logger.redaction.spec.ts
  ● logger redaction › redacts sensitive fields

    TypeError: child.bindings is not a function

      45 |       payload: { user_id: 'user-2' }
      46 |     });
    > 47 |     const msg = child.bindings();
         |                       ^
      48 |     expect(String(msg.req?.headers?.authorization || '')).toContain('[REDACTED]');
      49 |     expect(String(msg.body?.password || '')).toContain('[REDACTED]');
      50 |     expect(String(msg.message?.body || '')).toContain('[REDACTED]');

      at Object.<anonymous> (unit/lib.logger.redaction.spec.ts:47:23)

  ● logger redaction config › includes PII fields in redact list

    Cannot find module 'pino' from 'unit/lib.logger.redaction.spec.ts'

      64 |     process.env = { ...originalEnv } as any;
      65 |     pinoCalls = [];
    > 66 |     jest.doMock('pino', () => {
         |          ^
      67 |       const mock = (...args: any[]) => {
      68 |         pinoCalls.push(args[0] || {});
      69 |         // return a minimal logger stub

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.<anonymous> (unit/lib.logger.redaction.spec.ts:66:10)

  ● logger redaction config › includes PII fields in redact list

    Cannot find module 'pino' from 'unit/lib.logger.redaction.spec.ts'

      78 |   afterEach(() => {
      79 |     process.env = originalEnv;
    > 80 |     jest.dontMock('pino');
         |          ^
      81 |   });
      82 |
      83 |   test('includes PII fields in redact list', async () => {

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.<anonymous> (unit/lib.logger.redaction.spec.ts:80:10)

PASS unit/api.quizzes.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.quiz-attempts.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.files.download-ownership.spec.ts
  ● Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    /workspace/tests/unit/api.files.download-ownership.spec.ts:55
    function get(url, headers) { return new Request(url, { method: 'GET', headers: headers }); }
    ^

    SyntaxError: Identifier 'get' has already been declared

      at Runtime.createScriptFromCode (../node_modules/jest-runtime/build/index.js:1505:14)

FAIL unit/api.runtime.auth.exchange.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 29 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 3 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● runtime auth exchange › invalid token → 403

    expect(received).toBe(expected) // Object.is equality

    Expected: 403
    Received: 400

      22 |   test('invalid token → 403', async () => {
      23 |     const res = await (ExchangePOST as any)(post({ token: 'bad' }));
    > 24 |     expect(res.status).toBe(403);
         |                        ^
      25 |   });
      26 |
      27 |   test('audience mismatch when origin allowed → 403', async () => {

      at Object.<anonymous> (unit/api.runtime.auth.exchange.spec.ts:24:24)

  ● runtime auth exchange › valid dev token and matching origin → 200 returns runtimeToken

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200]

      47 |     const token = makeHsToken(claims);
      48 |     const res = await (ExchangePOST as any)(new Request('http://localhost/api/runtime/auth/exchange', { method: 'POST', headers: { 'content-type': 'application/json', origin: 'https://provider.example' } as any, body: JSON.stringify({ token }) } as any));
    > 49 |     expect([200]).toContain(res.status);
         |                   ^
      50 |     const json = await res.json();
      51 |     expect(json.runtimeToken).toBeTruthy();
      52 |     expect(json.expiresAt).toBeTruthy();

      at Object.<anonymous> (unit/api.runtime.auth.exchange.spec.ts:49:19)

PASS unit/api.runtime.guard.matrix.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.validation.bad-request.matrix.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/ui/NotificationsDropdownClient.spec.tsx
FAIL unit/api.runtime.asset.sign-url.scope.spec.ts
  ● Console

    console.log
      { ms: 5 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 2 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 3 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● runtime asset sign-url scopes (smoke) › missing scope → 403/401

    TypeError: Failed to parse URL from [object Object]

      32 |
      33 | function post(url: string, body: any, headers?: Record<string,string>) {
    > 34 |   return new Request(url, { method: 'POST', headers: { 'content-type': 'application/json', origin: 'https://provider.example', referer: 'https://provider.example/x', ...(headers||{}) } as any, body: JSON.stringify(body) } as any);
         |          ^
      35 | }
      36 |
      37 | describe('runtime asset sign-url scope', () => {

      at post (unit/api.runtime.asset.sign-url.scope.spec.ts:34:10)
      at Object.<anonymous> (unit/api.runtime.asset.sign-url.scope.spec.ts:13:44)

    Cause:
    TypeError: Invalid URL

      32 |
      33 | function post(url: string, body: any, headers?: Record<string,string>) {
    > 34 |   return new Request(url, { method: 'POST', headers: { 'content-type': 'application/json', origin: 'https://provider.example', referer: 'https://provider.example/x', ...(headers||{}) } as any, body: JSON.stringify(body) } as any);
         |          ^
      35 | }
      36 |
      37 | describe('runtime asset sign-url scope', () => {

      at post (unit/api.runtime.asset.sign-url.scope.spec.ts:34:10)
      at Object.<anonymous> (unit/api.runtime.asset.sign-url.scope.spec.ts:13:44)

  ● runtime asset sign-url scope › valid scope and content-type → 200 with url/key

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200]

      49 |     const token = makeJwt(['files.write']);
      50 |     const res = await (AssetSignPOST as any)(post('http://localhost/api/runtime/asset/sign-url', { content_type: 'image/png' }, { authorization: `Bearer ${token}` }));
    > 51 |     expect([200]).toContain(res.status);
         |                   ^
      52 |     const json = await res.json();
      53 |     expect(json.url).toBeTruthy();
      54 |     expect(json.key).toMatch(/runtime\//);

      at Object.<anonymous> (unit/api.runtime.asset.sign-url.scope.spec.ts:51:19)

  ● runtime asset sign-url scope › unsupported content type → 400

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 403

      58 |     const token = makeJwt(['files.write']);
      59 |     const res = await (AssetSignPOST as any)(post('http://localhost/api/runtime/asset/sign-url', { content_type: 'application/x-foo' }, { authorization: `Bearer ${token}` }));
    > 60 |     expect(res.status).toBe(400);
         |                        ^
      61 |   });
      62 | });
      63 |

      at Object.<anonymous> (unit/api.runtime.asset.sign-url.scope.spec.ts:60:24)

FAIL unit/api.parent-links.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● API /api/parent-links › GET unauth → 401; missing parent_id → 400; non-admin self allowed; non-self forbidden

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200, 204]

      58 |     globalThis.__TEST_HEADERS_STORE__?.cookies?.set?.('x-test-auth', 'parent');
      59 |     res = await (PLGet as any)(makeGet('http://localhost/api/parent-links?parent_id=test-parent-id'));
    > 60 |     expect([200, 204]).toContain(res.status);
         |                        ^
      61 |     // parent non-self forbidden
      62 |     res = await (PLGet as any)(makeGet('http://localhost/api/parent-links?parent_id=other-parent-id'));
      63 |     expect(res.status).toBe(403);

      at Object.<anonymous> (unit/api.parent-links.spec.ts:60:24)

PASS unit/api.runtime.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 2 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/lib.serverFetch.spec.ts
  ● Console

    console.debug
      [serverFetch] 200 http://localhost:3333/api/ping 0ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

    console.debug
      [serverFetch] 200 http://example.com/api/secure 0ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

    console.debug
      [serverFetch] 200 http://localhost:3333/api/test 1ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

FAIL unit/api.runtime.outcomes.jwks.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 14 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 6 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● runtime outcomes JWKS verification › valid provider token (mocked) -> 201

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200, 201]

      47 |     });
      48 |     const res = await (OutcomesPOST as any)(post('http://localhost/api/runtime/outcomes', { courseId: 'c1', userId: 'u1', event: { type: 'attempt.completed', score: 1, max: 1, passed: true } }, { authorization: 'Bearer good' }));
    > 49 |     expect([200,201]).toContain(res.status);
         |                       ^
      50 |   });
      51 | });
      52 |

      at Object.<anonymous> (unit/api.runtime.outcomes.jwks.spec.ts:49:23)

PASS unit/middleware.headers-and-guards.spec.ts
FAIL unit/api.submissions.rate-limit.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● submissions rate limits and headers › POST student create returns 429 with standard headers when limited

    TypeError: Failed to parse URL from [object Object]

       5 | }), { virtual: true });
       6 |
    >  7 | function post(url: string, headers?: Record<string,string>, body?: any) { return new Request(url, { method: 'POST', headers: headers as any, body: JSON.stringify(body || {}) } as any); }
         |                                                                                  ^
       8 |
       9 | describe('submissions POST rate limit headers', () => {
      10 |   const orig = { ...process.env } as any;

      at post (unit/api.submissions.rate-limit.spec.ts:7:82)
      at Object.<anonymous> (unit/api.submissions.rate-limit.spec.ts:42:48)

    Cause:
    TypeError: Invalid URL

       5 | }), { virtual: true });
       6 |
    >  7 | function post(url: string, headers?: Record<string,string>, body?: any) { return new Request(url, { method: 'POST', headers: headers as any, body: JSON.stringify(body || {}) } as any); }
         |                                                                                  ^
       8 |
       9 | describe('submissions POST rate limit headers', () => {
      10 |   const orig = { ...process.env } as any;

      at post (unit/api.submissions.rate-limit.spec.ts:7:82)
      at Object.<anonymous> (unit/api.submissions.rate-limit.spec.ts:42:48)

PASS unit/api.announcements.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/future.files.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.PUT (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.runtime.checkpoint.scopes.spec.ts
  ● Console

    console.log
      { ms: 5 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 4 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● runtime checkpoint scopes › save requires progress.write; load requires progress.read

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200, 201, 204]

      35 |     token = makeJwt(['progress.write']);
      36 |     res = await (SavePOST as any)(post('http://localhost/api/runtime/checkpoint/save', { key: 'k', state: { a: 1 } }, { authorization: `Bearer ${token}` }));
    > 37 |     expect([200,201,204]).toContain(res.status);
         |                           ^
      38 |     // Load without scope -> 403
      39 |     token = makeJwt([]);
      40 |     res = await (LoadGET as any)(get('http://localhost/api/runtime/checkpoint/load?key=k', { authorization: `Bearer ${token}` }));

      at Object.<anonymous> (unit/api.runtime.checkpoint.scopes.spec.ts:37:27)

PASS unit/api.messages.threads-and-messages.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.registry.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.reports.activity.retention.rate-limit.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 2 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.admin.governance.smoke.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.runtime.events.scopes.spec.ts
  ● Console

    console.log
      { ms: 3 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 5 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● runtime events scopes › course.progress requires progress.write; course.attempt.completed requires attempts.write

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200, 201, 204]

      31 |     token = makeJwt(['progress.write']);
      32 |     res = await (EventsPOST as any)(post('http://localhost/api/runtime/events', { type: 'course.progress', pct: 10 }, { authorization: `Bearer ${token}` }));
    > 33 |     expect([200,201,204]).toContain(res.status);
         |                           ^
      34 |     // Missing attempts.write for attempt.completed -> 403
      35 |     token = makeJwt([]);
      36 |     res = await (EventsPOST as any)(post('http://localhost/api/runtime/events', { type: 'course.attempt.completed', score: 1, max: 1, passed: true }, { authorization: `Bearer ${token}` }));

      at Object.<anonymous> (unit/api.runtime.events.scopes.spec.ts:33:27)

FAIL unit/api.files.download-url.permissions.spec.ts
  ● Console

    console.error
      { ms: 0, err: "Cannot read properties of undefined (reading 'from')" } route_error

      119 |         decrInFlight(path);
      120 |       } catch {}
    > 121 |       log.error({ ms, err: err?.message }, "route_error");
          |           ^
      122 |       try {
      123 |         const url = (req as any)?.url as string | undefined;
      124 |         const path = url ? new URL(url).pathname : 'unknown';

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:121:11)
      at Object.<anonymous> (unit/api.files.download-url.permissions.spec.ts:18:15)

  ● files download-url ownership checks › owner can download; non-owner teacher of course can download submission files; others 403

    TypeError: Cannot read properties of undefined (reading 'from')

      18 |   const supabase = getRouteHandlerSupabase();
      19 |   const expires = input.expiresIn ?? 300; // seconds
    > 20 |   const { data, error } = await (supabase as any).storage.from(input.bucket).createSignedUrl(input.objectKey, expires);
         |                                                           ^
      21 |   if (error) throw new Error(error.message);
      22 |   return (data as any).signedUrl as string;
      23 | }

      at presignDownloadUrl (../apps/web/src/lib/files.ts:20:59)
      at GET (../apps/web/src/app/api/files/download-url/route.ts:82:39)
      at Object.GET (../apps/web/src/server/withRouteTiming.ts:89:19)
      at Object.<anonymous> (unit/api.files.download-url.permissions.spec.ts:18:15)

PASS unit/security.csrf.double-submit.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.assignments.crud.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.error
      {
        issues: [
          { path: 'id', message: 'Required' },
          { path: 'course_id', message: 'Required' },
          { path: 'title', message: 'Required' },
          { path: 'created_at', message: 'Required' }
        ]
      } dto_response_validation_failed

      24 |     : (typeof s?.parse === 'function' ? (() => { try { return { success: true, data: s.parse(data) }; } catch (e: any) { return { success: false, error: e }; } })() : { success: true, data });
      25 |   if (!parsed.success) {
    > 26 |     try { getRequestLogger(requestId).error({ issues: redactIssues(parsed.error.issues) }, 'dto_response_validation_failed'); } catch {}
         |                                       ^
      27 |     return NextResponse.json({ error: { code: 'INTERNAL', message: 'Invalid response shape' }, requestId }, { status: 500, headers: { 'x-request-id': requestId } });
      28 |   }
      29 |   return NextResponse.json(parsed.data, { status, headers: { 'x-request-id': requestId } });

      at jsonDto (../apps/web/src/lib/jsonDto.ts:26:39)
      at DELETE (../apps/web/src/app/api/assignments/route.ts:143:17)
      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:89:19)
      at Object.<anonymous> (unit/api.assignments.crud.spec.ts:44:11)

    console.log
      { ms: 11 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● Assignments CRUD API › DELETE role checks

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      43 |     expect(res.status).toBe(403);
      44 |     res = await (AssignDELETE as any)(makeDelete('http://localhost/api/assignments?id=aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', { 'x-test-auth': 'teacher' }));
    > 45 |     expect(res.status).toBe(200);
         |                        ^
      46 |   });
      47 | });
      48 |

      at Object.<anonymous> (unit/api.assignments.crud.spec.ts:45:24)

PASS unit/api.role.guard.matrix.extended.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 1 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 1 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 1 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 1 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 1 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 1 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 1 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 1 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 4 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 1 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 1 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 1 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 1 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

PASS unit/api.providers.ratelimit.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/apiHandler.csrf.spec.ts
PASS unit/api.listing.headers.matrix.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.lessons.complete.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      {
        lessonId: '00000000-0000-0000-0000-00000000ab02',
        userId: '22222222-2222-2222-2222-222222222222',
        ms: 0
      } progress_marked

      at markLessonComplete (../apps/web/src/server/services/progress.ts:12:12)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      {
        lessonId: '11111111-1111-1111-1111-111111111111',
        userId: '22222222-2222-2222-2222-222222222222',
        ms: 0
      } progress_marked

      at markLessonComplete (../apps/web/src/server/services/progress.ts:12:12)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/gateways/SubmissionsGateway.contract.spec.ts
  ● Console

    console.debug
      [serverFetch] 200 http://web:3022/api/submissions 0ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

    console.debug
      [serverFetch] 200 http://web:3022/api/submissions 1ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

PASS unit/services.quizAttempts.spec.ts
FAIL unit/api.runtime.teacher.outcomes.spec.ts
  ● Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    /workspace/tests/unit/api.runtime.teacher.outcomes.spec.ts:51
    const get = (url, headers) => new Request(url, { method: 'GET', headers: headers });
          ^

    SyntaxError: Identifier 'get' has already been declared

      at Runtime.createScriptFromCode (../node_modules/jest-runtime/build/index.js:1505:14)

PASS unit/api.runtime.checkpoint.size-limit.spec.ts
  ● Console

    console.log
      { ms: 2 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 2 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.admin.export.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.headers.common.matrix.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 1 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

FAIL unit/api.runtime.outcomes.runtime-token.spec.ts
  ● Console

    console.log
      { ms: 4 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 3 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● runtime outcomes accepts runtime token when no jwks › 403 when missing attempts.write scope; 201 when scope present

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200, 201]

      36 |     token = makeHsToken({ sub: 'u1', courseId: 'c1', scopes: ['attempts.write'], iat: now, exp: now + 60 });
      37 |     res = await (OutcomesPOST as any)(post('http://localhost/api/runtime/outcomes', { courseId: 'c1', userId: 'u1', event: { type: 'attempt.completed', score: 1, max: 1, passed: true } }, { authorization: `Bearer ${token}` }));
    > 38 |     expect([200,201]).toContain(res.status);
         |                       ^
      39 |   });
      40 | });
      41 |

      at Object.<anonymous> (unit/api.runtime.outcomes.runtime-token.spec.ts:38:23)

PASS unit/api.runtime.gating.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/middleware.cors.disallowed-origin.spec.ts
PASS unit/testStore.edgecases.spec.ts
FAIL unit/server.scheduler.flags.spec.ts
  ● scheduler ensureJobsStarted flags › DUE_SOON_JOB=1 schedules due-soon job

    expect(received).toContain(expected) // indexOf

    Expected value: "assignment_due_soon"
    Received array: []

      26 |     mod.ensureJobsStarted();
      27 |     const calls = (scheduleJob as jest.Mock).mock.calls.map((c: any[]) => c[0]);
    > 28 |     expect(calls).toContain('assignment_due_soon');
         |                   ^
      29 |   });
      30 |
      31 |   test('PROVIDER_HEALTH_REFRESH_JOB=1 schedules provider health refresh', async () => {

      at Object.<anonymous> (unit/server.scheduler.flags.spec.ts:28:19)

  ● scheduler ensureJobsStarted flags › PROVIDER_HEALTH_REFRESH_JOB=1 schedules provider health refresh

    expect(received).toContain(expected) // indexOf

    Expected value: "provider_health_refresh"
    Received array: []

      34 |     mod.ensureJobsStarted();
      35 |     const calls = (scheduleJob as jest.Mock).mock.calls.map((c: any[]) => c[0]);
    > 36 |     expect(calls).toContain('provider_health_refresh');
         |                   ^
      37 |   });
      38 |
      39 |   test('REFRESH_PROGRESS_SUMMARY_JOB=1 schedules progress mv refresh', async () => {

      at Object.<anonymous> (unit/server.scheduler.flags.spec.ts:36:19)

  ● scheduler ensureJobsStarted flags › REFRESH_PROGRESS_SUMMARY_JOB=1 schedules progress mv refresh

    expect(received).toContain(expected) // indexOf

    Expected value: "refresh_progress_summary"
    Received array: []

      42 |     mod.ensureJobsStarted();
      43 |     const calls = (scheduleJob as jest.Mock).mock.calls.map((c: any[]) => c[0]);
    > 44 |     expect(calls).toContain('refresh_progress_summary');
         |                   ^
      45 |   });
      46 |
      47 |   test('QUOTA_RECONCILE_JOB=1 schedules quota reconcile', async () => {

      at Object.<anonymous> (unit/server.scheduler.flags.spec.ts:44:19)

  ● scheduler ensureJobsStarted flags › QUOTA_RECONCILE_JOB=1 schedules quota reconcile

    expect(received).toContain(expected) // indexOf

    Expected value: "quota_reconcile"
    Received array: []

      50 |     mod.ensureJobsStarted();
      51 |     const calls = (scheduleJob as jest.Mock).mock.calls.map((c: any[]) => c[0]);
    > 52 |     expect(calls).toContain('quota_reconcile');
         |                   ^
      53 |   });
      54 |
      55 |   test('BACKFILL_ATTACHMENT_SIZES_JOB=1 schedules backfill', async () => {

      at Object.<anonymous> (unit/server.scheduler.flags.spec.ts:52:19)

  ● scheduler ensureJobsStarted flags › BACKFILL_ATTACHMENT_SIZES_JOB=1 schedules backfill

    expect(received).toContain(expected) // indexOf

    Expected value: "attachment_size_backfill"
    Received array: []

      58 |     mod.ensureJobsStarted();
      59 |     const calls = (scheduleJob as jest.Mock).mock.calls.map((c: any[]) => c[0]);
    > 60 |     expect(calls).toContain('attachment_size_backfill');
         |                   ^
      61 |   });
      62 | });
      63 |

      at Object.<anonymous> (unit/server.scheduler.flags.spec.ts:60:19)

PASS unit/api.messages.read-all.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.files.upload-url.rate-quota-csrf.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.assignments.external-target.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● assignments external target upsert (EXTERNAL_COURSES=1) › POST upserts assignment_targets when target provided

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [201, 500]

      19 |
      20 |     const res = await (AssignPOST as any)(post({ course_id: 'c1', title: 'A', target: { external_course_id: 'e1', version: '1.0.0' } }));
    > 21 |     expect([201,500]).toContain(res.status);
         |                       ^
      22 |   });
      23 |
      24 |   test('PATCH upserts assignment_targets when target provided', async () => {

      at Object.<anonymous> (unit/api.assignments.external-target.spec.ts:21:23)

  ● assignments external target upsert (EXTERNAL_COURSES=1) › PATCH upserts assignment_targets when target provided

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [200, 500]

      31 |
      32 |     const res = await (AssignPATCH as any)(patch('http://localhost/api/assignments?id=aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', { title: 'B', target: { external_course_id: 'e1', version: '2.0.0' } }));
    > 33 |     expect([200,500]).toContain(res.status);
         |                       ^
      34 |   });
      35 | });
      36 |

      at Object.<anonymous> (unit/api.assignments.external-target.spec.ts:33:23)

PASS unit/api.courses.id.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/services.submissions.queue.spec.ts
FAIL unit/ui/GradeRowClient.spec.tsx
  ● Test suite failed to run

    Cannot find module '@hookform/resolvers/zod' from '../apps/web/src/app/dashboard/teacher/[courseId]/assignments/[assignmentId]/submissions/GradeRowClient.tsx'

    Require stack:
      /workspace/apps/web/src/app/dashboard/teacher/[courseId]/assignments/[assignmentId]/submissions/GradeRowClient.tsx
      unit/ui/GradeRowClient.spec.tsx

      2 | import { useState } from "react";
      3 | import { useForm } from "react-hook-form";
    > 4 | import { zodResolver } from "@hookform/resolvers/zod";
        | ^
      5 | import { submissionGradeRequest } from "@education/shared";
      6 | import { z } from "zod";
      7 | import { createSubmissionsGateway } from "@/lib/data/submissions";

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.<anonymous> (../apps/web/src/app/dashboard/teacher/[courseId]/assignments/[assignmentId]/submissions/GradeRowClient.tsx:4:1)
      at Object.<anonymous> (unit/ui/GradeRowClient.spec.tsx:6:1)

PASS unit/api.runtime.asset.sign-url.ratelimit.spec.ts
  ● Console

    console.log
      { ms: 5 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 5 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.files.attachments.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.reports.activity.retention.shape.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.runtime.rate-limit.spec.ts
  ● Console

    console.log
      { ms: 4 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.launch-token.license.enforcement.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/lib.serverFetch.csrf-header.spec.ts
  ● Console

    console.debug
      [serverFetch] 200 http://localhost:3030/api/messages 0ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

FAIL unit/api.runtime.grade.ratelimit.spec.ts
  ● Console

    console.log
      { ms: 2 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● runtime grade rate-limit headers › returns 201 first, then 429 with standard headers

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200, 201]

      25 |     const h = { authorization: `Bearer ${token}` };
      26 |     let res = await (GradePOST as any)(post({ runtimeAttemptId: 'ra1', score: 1, max: 1, passed: true }, h));
    > 27 |     expect([200,201]).toContain(res.status);
         |                       ^
      28 |     res = await (GradePOST as any)(post({ runtimeAttemptId: 'ra2', score: 1, max: 1, passed: true }, h));
      29 |     expect(res.status).toBe(429);
      30 |     expect(res.headers.get('retry-after')).toBeTruthy();

      at Object.<anonymous> (unit/api.runtime.grade.ratelimit.spec.ts:27:23)

PASS unit/api.courses.transfer-owner.auth.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.error
      { issues: [ { path: 'id', message: 'Required' } ] } dto_response_validation_failed

      24 |     : (typeof s?.parse === 'function' ? (() => { try { return { success: true, data: s.parse(data) }; } catch (e: any) { return { success: false, error: e }; } })() : { success: true, data });
      25 |   if (!parsed.success) {
    > 26 |     try { getRequestLogger(requestId).error({ issues: redactIssues(parsed.error.issues) }, 'dto_response_validation_failed'); } catch {}
         |                                       ^
      27 |     return NextResponse.json({ error: { code: 'INTERNAL', message: 'Invalid response shape' }, requestId }, { status: 500, headers: { 'x-request-id': requestId } });
      28 |   }
      29 |   return NextResponse.json(parsed.data, { status, headers: { 'x-request-id': requestId } });

      at jsonDto (../apps/web/src/lib/jsonDto.ts:26:39)
      at PATCH (../apps/web/src/app/api/courses/[id]/transfer-owner/route.ts:56:17)
      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:89:19)
      at Object.<anonymous> (unit/api.courses.transfer-owner.auth.spec.ts:23:5)

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.error
      { issues: [ { path: 'id', message: 'Required' } ] } dto_response_validation_failed

      24 |     : (typeof s?.parse === 'function' ? (() => { try { return { success: true, data: s.parse(data) }; } catch (e: any) { return { success: false, error: e }; } })() : { success: true, data });
      25 |   if (!parsed.success) {
    > 26 |     try { getRequestLogger(requestId).error({ issues: redactIssues(parsed.error.issues) }, 'dto_response_validation_failed'); } catch {}
         |                                       ^
      27 |     return NextResponse.json({ error: { code: 'INTERNAL', message: 'Invalid response shape' }, requestId }, { status: 500, headers: { 'x-request-id': requestId } });
      28 |   }
      29 |   return NextResponse.json(parsed.data, { status, headers: { 'x-request-id': requestId } });

      at jsonDto (../apps/web/src/lib/jsonDto.ts:26:39)
      at PATCH (../apps/web/src/app/api/courses/[id]/transfer-owner/route.ts:56:17)
      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:89:19)
      at Object.<anonymous> (unit/api.courses.transfer-owner.auth.spec.ts:24:17)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.providers.dto-and-ratelimit.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.runtime.events.ratelimit.spec.ts
  ● Console

    console.log
      { ms: 2 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● runtime events rate-limit headers › returns 429 with standard headers on rate limit

    expect(received).toBe(expected) // Object.is equality

    Expected: 429
    Received: 403

      30 |     const token = makeJwt(['progress.write']);
      31 |     const res = await (EventsPOST as any)(post({ type: 'course.progress', pct: 10 }, { authorization: `Bearer ${token}` }));
    > 32 |     expect(res.status).toBe(429);
         |                        ^
      33 |     expect(res.headers.get('retry-after')).toBeTruthy();
      34 |     expect(res.headers.get('x-rate-limit-reset')).toBeTruthy();
      35 |     expect(res.headers.get('x-rate-limit-remaining')).toBe('0');

      at Object.<anonymous> (unit/api.runtime.events.ratelimit.spec.ts:32:24)

PASS unit/api.quiz-questions.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.runtime.v2.security.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/lib.serverFetch.headers.spec.ts
  ● Console

    console.debug
      [serverFetch] 200 http://localhost:3030/api/health 0ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

    console.debug
      [serverFetch] 200 http://localhost:3030/api/health 0ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

    console.debug
      [serverFetch] 400 http://localhost:3030/api/x 0ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

PASS unit/api.runtime.cors.headers.spec.ts
  ● Console

    console.log
      { ms: 5 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.messages.csrf-double-submit.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.files.roundtrip.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 2 } route_success

      at Object.PUT (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.quiz-choices.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.runtime.idempotency.spec.ts
  ● Console

    console.log
      { ms: 3 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● runtime progress idempotency › duplicate request with same Idempotency-Key is replayed 200 with header

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200, 201, 204]

      25 |     const h = { authorization: `Bearer ${token}`, 'Idempotency-Key': 'dup-1' } as Record<string,string>;
      26 |     let res = await (ProgressPOST as any)(post('http://localhost/api/runtime/progress', h));
    > 27 |     expect([200,201,204]).toContain(res.status);
         |                           ^
      28 |     res = await (ProgressPOST as any)(post('http://localhost/api/runtime/progress', h));
      29 |     expect([200]).toContain(res.status);
      30 |     expect(res.headers.get('idempotency-replayed')).toBe('1');

      at Object.<anonymous> (unit/api.runtime.idempotency.spec.ts:27:27)

PASS unit/api.notifications.read-all.csrf.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/middleware.env-assertions.spec.ts
  ● middleware production env assertions and CSRF cookie › production with RUNTIME_API_V2=1 and missing RS256 keys -> 500

    TypeError: (0 , middleware_1.middleware) is not a function

      11 |   test('production with RUNTIME_API_V2=1 and missing RS256 keys -> 500', () => {
      12 |     process.env = { ...orig, NODE_ENV: 'production', RUNTIME_API_V2: '1', NEXT_RUNTIME_PUBLIC_KEY: '', NEXT_RUNTIME_PRIVATE_KEY: '', NEXT_RUNTIME_KEY_ID: '' } as any;
    > 13 |     const res = middleware(makeReq());
         |                           ^
      14 |     expect([500,200,403]).toContain(res.status);
      15 |     if (res.status === 500) {
      16 |       expect(res.headers.get('x-request-id')).toBeTruthy();

      at Object.<anonymous> (unit/middleware.env-assertions.spec.ts:13:27)

  ● middleware production env assertions and CSRF cookie › production with missing Supabase env -> 500

    TypeError: (0 , middleware_1.middleware) is not a function

      20 |   test('production with missing Supabase env -> 500', () => {
      21 |     process.env = { ...orig, NODE_ENV: 'production', NEXT_PUBLIC_SUPABASE_URL: '', NEXT_PUBLIC_SUPABASE_ANON_KEY: '' } as any;
    > 22 |     const res = middleware(makeReq());
         |                           ^
      23 |     expect([500,200,403]).toContain(res.status);
      24 |   });
      25 |

      at Object.<anonymous> (unit/middleware.env-assertions.spec.ts:22:27)

  ● middleware production env assertions and CSRF cookie › production with http Supabase URL -> 500

    TypeError: (0 , middleware_1.middleware) is not a function

      26 |   test('production with http Supabase URL -> 500', () => {
      27 |     process.env = { ...orig, NODE_ENV: 'production', NEXT_PUBLIC_SUPABASE_URL: 'http://example.com', NEXT_PUBLIC_SUPABASE_ANON_KEY: 'x' } as any;
    > 28 |     const res = middleware(makeReq());
         |                           ^
      29 |     expect([500,200,403]).toContain(res.status);
      30 |   });
      31 |

      at Object.<anonymous> (unit/middleware.env-assertions.spec.ts:28:27)

  ● middleware production env assertions and CSRF cookie › production with TEST_MODE=1 -> 500

    TypeError: (0 , middleware_1.middleware) is not a function

      32 |   test('production with TEST_MODE=1 -> 500', () => {
      33 |     process.env = { ...orig, NODE_ENV: 'production', TEST_MODE: '1' } as any;
    > 34 |     const res = middleware(makeReq());
         |                           ^
      35 |     expect([500,200,403]).toContain(res.status);
      36 |   });
      37 |

      at Object.<anonymous> (unit/middleware.env-assertions.spec.ts:34:27)

  ● middleware production env assertions and CSRF cookie › CSRF cookie set when CSRF_DOUBLE_SUBMIT=1 and missing

    TypeError: (0 , middleware_1.middleware) is not a function

      38 |   test('CSRF cookie set when CSRF_DOUBLE_SUBMIT=1 and missing', () => {
      39 |     process.env = { ...orig, CSRF_DOUBLE_SUBMIT: '1' } as any;
    > 40 |     const res = middleware(makeReq());
         |                           ^
      41 |     // cookie should be set when missing
      42 |     const setCookie = (res as any).cookies?.get?.('csrf_token') || null;
      43 |     expect(setCookie || res.headers.get('set-cookie')).toBeTruthy();

      at Object.<anonymous> (unit/middleware.env-assertions.spec.ts:40:27)

PASS unit/api.files.negatives.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PUT (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.lessons.reorder.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.announcements.rate-limit.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.notifications-preferences.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.assignments.target.upsert.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● assignments target upsert (EXTERNAL_COURSES=1) › POST upserts assignment_targets when target provided

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [201, 500]

      15 |     const body = { course_id: '00000000-0000-0000-0000-000000000001', title: 'A', target: { source: 'v2', external_course_id: '11111111-1111-1111-1111-111111111111', version_id: '22222222-2222-2222-2222-222222222222' } } as any;
      16 |     const res = await (AssignPOST as any)(req('POST', 'http://localhost/api/assignments', body));
    > 17 |     expect([201, 500]).toContain(res.status); // 201 success; 500 if DTO mismatch in test harness
         |                        ^
      18 |   });
      19 |
      20 |   test('PATCH upserts assignment_targets when target provided', async () => {

      at Object.<anonymous> (unit/api.assignments.target.upsert.spec.ts:17:24)

  ● assignments target upsert (EXTERNAL_COURSES=1) › PATCH upserts assignment_targets when target provided

    expect(received).toContain(expected) // indexOf

    Expected value: 401
    Received array: [200, 500]

      23 |     const body = { title: 'B', target: { source: 'v1', external_course_id: '11111111-1111-1111-1111-111111111111', version_id: '22222222-2222-2222-2222-222222222222' } } as any;
      24 |     const res = await (AssignPATCH as any)(req('PATCH', 'http://localhost/api/assignments?id=00000000-0000-0000-0000-000000000001', body));
    > 25 |     expect([200, 500]).toContain(res.status);
         |                        ^
      26 |   });
      27 | });
      28 |

      at Object.<anonymous> (unit/api.assignments.target.upsert.spec.ts:25:24)

FAIL unit/db.rls.negative.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● DB RLS negative cases (policy guards) › non-owner cannot finalize someone else file (RLS and route guard)

    expect(received).toContain(expected) // indexOf

    Expected value: 404
    Received array: [401, 403]

      23 |     const req = new Request('http://localhost/api/files/finalize', { method: 'POST', headers: { 'content-type': 'application/json', 'x-test-auth': 'student' } as any, body: JSON.stringify({ key: 'k1', size_bytes: 100 }) } as any);
      24 |     const res = await route.POST(req as any);
    > 25 |     expect([401,403]).toContain(res.status);
         |                       ^
      26 |   });
      27 |
      28 |   test('student cannot list submissions for other assignment without auth as teacher', async () => {

      at Object.<anonymous> (unit/db.rls.negative.spec.ts:25:23)

  ● DB RLS negative cases (policy guards) › student cannot list submissions for other assignment without auth as teacher

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [401, 403]

      29 |     const route = await import('../../apps/web/src/app/api/submissions/route');
      30 |     const res = await route.GET(new Request('http://localhost/api/submissions?assignment_id=00000000-0000-0000-0000-000000000999', { headers: { 'x-test-auth': 'student' } } as any) as any);
    > 31 |     expect([401,403]).toContain(res.status);
         |                       ^
      32 |   });
      33 | });
      34 |

      at Object.<anonymous> (unit/db.rls.negative.spec.ts:31:23)

PASS unit/api.modes.prod-guards.spec.ts
PASS unit/api.notifications.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/db.rls.assignments.negative.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● Assignments RLS/authorization negatives › student cannot create assignment

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [401, 403]

      12 |     const req = new Request('http://localhost/api/assignments', { method: 'POST', headers: { 'content-type': 'application/json', 'x-test-auth': 'student' } as any, body: JSON.stringify({ course_id: 'c1', title: 'X', points: 10, due_at: null }) } as any);
      13 |     const res = await route.POST(req as any);
    > 14 |     expect([401,403]).toContain(res.status);
         |                       ^
      15 |   });
      16 |
      17 |   test('student cannot update assignment', async () => {

      at Object.<anonymous> (unit/db.rls.assignments.negative.spec.ts:14:23)

PASS unit/api.modules.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.csrf.double-submit.spec.ts
PASS unit/api.messages.threads.ratelimit.headers.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/middleware.security-headers.more.spec.ts
  ● middleware additional security headers › sets HSTS only in production

    expect(received).toBe(expected) // Object.is equality

    Expected: "max-age=31536000; includeSubDomains; preload"
    Received: null

      38 |     (process.env as any).NODE_ENV = 'production';
      39 |     const resProd: any = await (middleware as any)(req('http://localhost/api/health'));
    > 40 |     expect(resProd.headers.get('Strict-Transport-Security')).toBe('max-age=31536000; includeSubDomains; preload');
         |                                                              ^
      41 |   });
      42 | });
      43 |

      at Object.<anonymous> (unit/middleware.security-headers.more.spec.ts:40:62)

PASS unit/api.rls.governance.negative.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.enrollments.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● API /api/enrollments › POST unauth → 401; non-student → 403; student → 201 with own student_id

    expect(received).toBe(expected) // Object.is equality

    Expected: "test-student-id"
    Received: "22222222-2222-2222-2222-222222222222"

      28 | 		expect(res.status).toBe(201);
      29 | 		const json = await res.json();
    > 30 | 		expect(json.student_id).toBe('test-student-id');
         | 		                        ^
      31 | 	});
      32 |
      33 | 	test('GET unauth → 401; echoes x-request-id', async () => {

      at Object.<anonymous> (unit/api.enrollments.spec.ts:30:27)

FAIL unit/lib.usage.increment.spec.ts
  ● incrementUsageCounter › upserts with incremented counters when row exists

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 0

      18 |
      19 |     await incrementUsageCounter({ metric: 'runtime.progress', courseId: 'c1', providerId: null, count: 5, storageBytes: 2, computeMinutes: 0 });
    > 20 |     expect(upserts.length).toBe(1);
         |                            ^
      21 |     expect(upserts[0].count).toBe(7);
      22 |     expect(upserts[0].storage_bytes).toBe(12);
      23 |     expect(upserts[0].compute_minutes).toBe(3);

      at Object.<anonymous> (unit/lib.usage.increment.spec.ts:20:28)

  ● incrementUsageCounter › upserts with initial values when row does not exist

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 0

      37 |
      38 |     await incrementUsageCounter({ metric: 'runtime.grade', courseId: 'c2', providerId: 'p1', count: 1, storageBytes: 0, computeMinutes: 4 });
    > 39 |     expect(upserts.length).toBe(1);
         |                            ^
      40 |     expect(upserts[0].count).toBe(1);
      41 |     expect(upserts[0].compute_minutes).toBe(4);
      42 |   });

      at Object.<anonymous> (unit/lib.usage.increment.spec.ts:39:28)

PASS unit/testStore.spec.ts
PASS unit/api.runtime.preflight.options.spec.ts
FAIL unit/api.messages.port-toggle.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● MESSAGING_PORT toggle routes › GET returns 200 with array and x-total-count

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [200, 500]

      12 |   test('GET returns 200 with array and x-total-count', async () => {
      13 |     const res = await (MessagesGET as any)(get('http://localhost/api/messages?thread_id=t1', { 'x-test-auth': 'student' }));
    > 14 |     expect([200,500]).toContain(res.status);
         |                       ^
      15 |     if (res.status === 200) {
      16 |       expect(res.headers.get('x-total-count')).toBeDefined();
      17 |       const data = await res.json();

      at Object.<anonymous> (unit/api.messages.port-toggle.spec.ts:14:23)

  ● MESSAGING_PORT toggle routes › POST + PATCH (mark read) via port

    expect(received).toContain(expected) // indexOf

    Expected value: 401
    Received array: [201, 500]

      22 |   test('POST + PATCH (mark read) via port', async () => {
      23 |     const created = await (MessagesPOST as any)(post('http://localhost/api/messages', { thread_id: 'thr1', body: 'hi' }, { 'x-test-auth': 'student' }));
    > 24 |     expect([201,500]).toContain(created.status);
         |                       ^
      25 |     if (created.status !== 201) return; // bail if test env not suitable
      26 |     const msg = await created.json();
      27 |     const res = await (MessagesPATCH as any)(patch(`http://localhost/api/messages?id=${encodeURIComponent(msg.id)}`, { 'x-test-auth': 'student' }));

      at Object.<anonymous> (unit/api.messages.port-toggle.spec.ts:24:23)

PASS unit/server.withRouteTiming.csrf.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

FAIL unit/api.announcements.events.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● announcements event producers (TEST_MODE) › create emits announcement.create

    expect(received).toContain(expected) // indexOf

    Expected value: 401
    Received array: [201, 500]

      14 |     const { getInMemoryEvents } = await import('../../apps/web/src/lib/events');
      15 |     const res = await (AnnPOST as any)(post({ course_id: 'aaaaaaaa-aaaa-aaaa-aaaa-000000000001', title: 'T', body: 'B' }));
    > 16 |     expect([201,500]).toContain(res.status);
         |                       ^
      17 |     const ev = getInMemoryEvents().find(e => e.event_type === 'announcement.create');
      18 |     expect(ev).toBeTruthy();
      19 |   });

      at Object.<anonymous> (unit/api.announcements.events.spec.ts:16:23)

  ● announcements event producers (TEST_MODE) › delete emits announcement.delete

    expect(received).toContain(expected) // indexOf

    Expected value: 401
    Received array: [200, 500, 404]

      24 |     const { getInMemoryEvents } = await import('../../apps/web/src/lib/events');
      25 |     const res = await (AnnDEL as any)(del('http://localhost/api/announcements?id=aaaaaaaa-aaaa-aaaa-aaaa-000000000002'));
    > 26 |     expect([200,500,404]).toContain(res.status);
         |                           ^
      27 |     const ev = getInMemoryEvents().find(e => e.event_type === 'announcement.delete');
      28 |     expect(ev).toBeTruthy();
      29 |   });

      at Object.<anonymous> (unit/api.announcements.events.spec.ts:26:27)

FAIL unit/api.modules.events.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● modules event producers (TEST_MODE) › create emits module.create

    expect(received).toContain(expected) // indexOf

    Expected value: 401
    Received array: [201, 500]

      14 |     const { getInMemoryEvents } = await import('../../apps/web/src/lib/events');
      15 |     const res = await (ModulesPOST as any)(post({ course_id: 'aaaaaaaa-aaaa-aaaa-aaaa-000000000010', title: 'M', order_index: 1 }));
    > 16 |     expect([201,500]).toContain(res.status);
         |                       ^
      17 |     const ev = getInMemoryEvents().find(e => e.event_type === 'module.create');
      18 |     expect(ev).toBeTruthy();
      19 |   });

      at Object.<anonymous> (unit/api.modules.events.spec.ts:16:23)

  ● modules event producers (TEST_MODE) › delete emits module.delete

    expect(received).toContain(expected) // indexOf

    Expected value: 401
    Received array: [200, 500, 404]

      24 |     const { getInMemoryEvents } = await import('../../apps/web/src/lib/events');
      25 |     const res = await (ModulesDEL as any)(del('http://localhost/api/modules?id=aaaaaaaa-aaaa-aaaa-aaaa-000000000011'));
    > 26 |     expect([200,500,404]).toContain(res.status);
         |                           ^
      27 |     const ev = getInMemoryEvents().find(e => e.event_type === 'module.delete');
      28 |     expect(ev).toBeTruthy();
      29 |   });

      at Object.<anonymous> (unit/api.modules.events.spec.ts:26:27)

PASS unit/api.providers.health.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/services.quizzes.spec.ts
PASS unit/api.health.rate-limits.snapshot.spec.ts
PASS unit/api.notifications.rate-limit.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.assignments.post.csrf.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● assignments POST CSRF double-submit › 403 missing/mismatched tokens; 201 when matched

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [200, 201]

      26 |     // Match
      27 |     res = await (AssignmentsPOST as any)(post(payload, { origin: 'http://localhost', referer: 'http://localhost/x', cookie: 'csrf_token=t', 'x-csrf-token': 't' }));
    > 28 |     expect([200,201]).toContain(res.status);
         |                       ^
      29 |   });
      30 | });
      31 |

      at Object.<anonymous> (unit/api.assignments.post.csrf.spec.ts:28:23)

PASS unit/services.dashboard.spec.ts
  ● Console

    console.debug
      { ms: 0 } dash_teacher_widgets

      at getTeacherDashboard (../apps/web/src/server/services/dashboard.ts:51:12)

    console.debug
      { ms: 0 } dash_student_widgets

      at getStudentDashboard (../apps/web/src/server/services/dashboard.ts:134:12)

FAIL unit/api.quizzes.ratelimit.spec.ts
  ● Console

    console.error
      {
        ms: 1,
        err: '[\n' +
          '  {\n' +
          '    "code": "too_small",\n' +
          '    "minimum": 3,\n' +
          '    "type": "string",\n' +
          '    "inclusive": true,\n' +
          '    "exact": false,\n' +
          '    "message": "String must contain at least 3 character(s)",\n' +
          '    "path": [\n' +
          '      "title"\n' +
          '    ]\n' +
          '  }\n' +
          ']'
      } route_error

      119 |         decrInFlight(path);
      120 |       } catch {}
    > 121 |       log.error({ ms, err: err?.message }, "route_error");
          |           ^
      122 |       try {
      123 |         const url = (req as any)?.url as string | undefined;
      124 |         const path = url ? new URL(url).pathname : 'unknown';

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:121:11)
      at Object.<anonymous> (unit/api.quizzes.ratelimit.spec.ts:15:17)

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● quizzes rate-limit headers on PATCH/DELETE › PATCH returns 429 with standard headers when limited

    ZodError: [
      {
        "code": "too_small",
        "minimum": 3,
        "type": "string",
        "inclusive": true,
        "exact": false,
        "message": "String must contain at least 3 character(s)",
        "path": [
          "title"
        ]
      }
    ]

       96 |   } catch {}
       97 |   const body = await req.json();
    >  98 |   const parsed = quizUpdateRequest.parse(body);
          |                                    ^
       99 |   const out = await updateQuizApi(q.id, parsed);
      100 |   try {
      101 |     const dto = quizDto.parse(out);

      at Object.get error [as error] (../node_modules/zod/v3/types.cjs:45:31)
      at ZodEffects.parse (../node_modules/zod/v3/types.cjs:120:22)
      at PATCH (../apps/web/src/app/api/quizzes/route.ts:98:36)
      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:89:19)
      at Object.<anonymous> (unit/api.quizzes.ratelimit.spec.ts:15:17)

FAIL unit/future.observability.logs.spec.ts
  ● observability logs (services) › dash_teacher_widgets and dash_student_widgets include ms

    TypeError: Cannot set properties of undefined (setting 'length')

      23 |   test('dash_teacher_widgets and dash_student_widgets include ms', async () => {
      24 |     const logs: any[] = (loggerMod as any).__TEST_LOGS__;
    > 25 |     logs.length = 0;
         |                ^
      26 |     await dashboardSvc.getDashboardForUser('test-teacher-id', 'teacher');
      27 |     await dashboardSvc.getDashboardForUser('test-student-id', 'student');
      28 |     expect(logs.some(l => l.msg === 'dash_teacher_widgets' && typeof l.obj?.ms === 'number')).toBe(true);

      at Object.<anonymous> (unit/future.observability.logs.spec.ts:25:16)

  ● observability logs (services) › progress_marked counter emitted on completion

    TypeError: Cannot set properties of undefined (setting 'length')

      32 |   test('progress_marked counter emitted on completion', async () => {
      33 |     const logs: any[] = (loggerMod as any).__TEST_LOGS__;
    > 34 |     logs.length = 0;
         |                ^
      35 |     const out = await progressSvc.markLessonComplete('u1', '00000000-0000-0000-0000-000000000001');
      36 |     expect(out.lessonId).toBeTruthy();
      37 |     expect(logs.some(l => l.msg === 'progress_marked' && typeof l.obj?.ms === 'number')).toBe(true);

      at Object.<anonymous> (unit/future.observability.logs.spec.ts:34:16)

PASS unit/api.messages.threads.ratelimit.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.progress.errors.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● GET /api/progress error paths › 500 when lessons query fails

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 200

      15 |     jest.spyOn(supabaseServer, 'getCurrentUserInRoute').mockResolvedValue({ id: 'u1', email: 't@example.com', user_metadata: { role: 'teacher' } } as any);
      16 |     const res = await (ProgressGET as any)(makeReq('http://localhost/api/progress?course_id=00000000-0000-0000-0000-000000000001'));
    > 17 |     expect(res.status).toBe(500);
         |                        ^
      18 |     const json = await res.json();
      19 |     expect(json.error?.code).toBe('DB_ERROR');
      20 |   });

      at Object.<anonymous> (unit/api.progress.errors.spec.ts:17:24)

  ● GET /api/progress error paths › 403 for per_student when not teacher (non-test mode)

    expect(received).toBe(expected) // Object.is equality

    Expected: 403
    Received: 200

      25 |     jest.spyOn(supabaseServer, 'getCurrentUserInRoute').mockResolvedValue({ id: 'u2', email: 's@example.com', user_metadata: { role: 'student' } } as any);
      26 |     const res = await (ProgressGET as any)(makeReq('http://localhost/api/progress?course_id=00000000-0000-0000-0000-000000000001&per_student=1'));
    > 27 |     expect(res.status).toBe(403);
         |                        ^
      28 |   });
      29 | });
      30 |

      at Object.<anonymous> (unit/api.progress.errors.spec.ts:27:24)

PASS unit/services.dashboard.needsGrading.spec.ts
  ● Console

    console.debug
      { ms: 0 } dash_teacher_widgets

      at getTeacherDashboard (../apps/web/src/server/services/dashboard.ts:51:12)

    console.debug
      { ms: 0 } dash_teacher_widgets

      at getTeacherDashboard (../apps/web/src/server/services/dashboard.ts:51:12)

PASS unit/schemas.env.runtime-keys.required.spec.ts
PASS unit/services.lessons.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.files.finalize.permissions.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/services.submissions.queue.pagination.spec.ts
PASS unit/api.events.behavior.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.courses.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.teacher.grading-queue.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.runtime.asset.sign-url.spec.ts
  ● Console

    console.log
      { ms: 2 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 3 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 3 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/future.observability.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.error
      { ms: 0, err: 'boom' } route_error

      119 |         decrInFlight(path);
      120 |       } catch {}
    > 121 |       log.error({ ms, err: err?.message }, "route_error");
          |           ^
      122 |       try {
      123 |         const url = (req as any)?.url as string | undefined;
      124 |         const path = url ? new URL(url).pathname : 'unknown';

      at ../apps/web/src/server/withRouteTiming.ts:121:11
      at Object.<anonymous> (unit/future.observability.spec.ts:13:5)

    console.debug
      [serverFetch] 200 http://web:3022/api/demo 0ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

PASS unit/api.announcements.ratelimit.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.providers.patch.rate-limit-auth.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.requestId.headers.matrix.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.parent-links.headers.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/gateways/health.gateway.spec.ts
PASS unit/api.runtime.cors.spec.ts
  ● Console

    console.log
      { ms: 2 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/apiHandler.spec.ts
PASS unit/api.registry.courses.auth-rate.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.files.attachment.delete.auth.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.registry.versions.auth-rate.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/server.withRouteTiming.runtime-csrf-skip.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

  ● withRouteTiming skips CSRF on /api/runtime/* › cross-origin POST to runtime path passes without same-origin or double-submit

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 403

      23 |     const handler = withRouteTiming(async () => new Response(JSON.stringify({ ok: true }), { status: 200 }));
      24 |     const res = await (handler as any)(mkReq('http://localhost/api/runtime/progress', 'POST', { origin: 'http://evil.example', referer: 'http://evil.example/p' }) as any);
    > 25 |     expect(res.status).toBe(200);
         |                        ^
      26 |     expect(res.headers.get('x-request-id')).toBeTruthy();
      27 |   });
      28 | });

      at Object.<anonymous> (unit/server.withRouteTiming.runtime-csrf-skip.spec.ts:25:24)

PASS unit/services.announcements.spec.ts
PASS unit/ui/SystemThroughputProfiler.spec.tsx
FAIL unit/middleware.csrf-cookie.spec.ts
  ● middleware CSRF cookie issuance › sets csrf_token cookie when missing

    expect(received).toBeTruthy()

    Received: false

      39 |     // Our mock NextResponse.next returns an object with cookies Map interface
      40 |     const hasCookie = !!res?.cookies?.get?.('csrf_token');
    > 41 |     expect(hasCookie).toBeTruthy();
         |                       ^
      42 |   });
      43 | });
      44 |

      at Object.<anonymous> (unit/middleware.csrf-cookie.spec.ts:41:23)

PASS unit/api.files.content-type-default.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.PUT (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.dto.enforced.on.success.spec.ts
  ● Console

    console.debug
      { ms: 0 } dash_student_widgets

      at getStudentDashboard (../apps/web/src/server/services/dashboard.ts:134:12)

    console.log
      { ms: 2 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      {
        lessonId: '00000000-0000-0000-0000-000000000001',
        userId: '22222222-2222-2222-2222-222222222222',
        ms: 0
      } progress_marked

      at markLessonComplete (../apps/web/src/server/services/progress.ts:12:12)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.runtime.outcomes.list.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 11 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● runtime outcomes list for course (auth, query, headers) › teacher -> 200 with JSON array and optional count header (or 500 on DB error)

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200, 500]

      26 |   test('teacher -> 200 with JSON array and optional count header (or 500 on DB error)', async () => {
      27 |     const res = await (OutcomesListGET as any)(get(`${base}?course_id=${courseId}`, { 'x-test-auth': 'teacher' }));
    > 28 |     expect([200,500]).toContain(res.status);
         |                       ^
      29 |     if (res.status === 200) {
      30 |       expect(res.headers.get('content-type') || '').toMatch(/application\/json/);
      31 |       const count = res.headers.get('x-total-count');

      at Object.<anonymous> (unit/api.runtime.outcomes.list.spec.ts:28:23)

PASS unit/api.progress.access.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/schemas.quiz.spec.ts
FAIL unit/security.headers-and-origin.spec.ts
  ● security headers and CSRF origin/referer checks › middleware sets core security headers

    TypeError: (0 , middleware_1.middleware) is not a function

      11 |
      12 |   test('middleware sets core security headers', () => {
    > 13 |     const res = middleware({ headers: new Headers(), nextUrl: new URL('http://localhost') } as any);
         |                           ^
      14 |     expect(res.headers.get('Content-Security-Policy')).toBeTruthy();
      15 |     expect(res.headers.get('Referrer-Policy')).toBe('strict-origin-when-cross-origin');
      16 |     expect(res.headers.get('X-Content-Type-Options')).toBe('nosniff');

      at Object.<anonymous> (unit/security.headers-and-origin.spec.ts:13:27)

PASS unit/api.registry.rate-limit-and-auth.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/security.csrf.double-submit.more-routes.spec.ts
PASS unit/schemas.dashboard.spec.ts
PASS unit/api.files.resolve.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.lessons-complete.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      {
        lessonId: '00000000-0000-0000-0000-000000000001',
        userId: '22222222-2222-2222-2222-222222222222',
        ms: 0
      } progress_marked

      at markLessonComplete (../apps/web/src/server/services/progress.ts:12:12)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/lib.jwksCache.ttl.spec.ts
FAIL unit/client.serverFetch.csrf.spec.ts
  ● Console

    console.debug
      [serverFetch] 200 http://web:3022/api/messages 0ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

  ● serverFetch CSRF header attachment › attaches x-csrf-token for unsafe methods when cookie present

    expect(received).toBe(expected) // Object.is equality

    Expected: "abc"
    Received: null

      20 |       Object.defineProperty(global, 'document', { value: { cookie: 'csrf_token=abc' }, configurable: true });
      21 |       await serverFetch('/api/messages', { method: 'POST', headers: { 'content-type': 'application/json' }, body: JSON.stringify({}) });
    > 22 |       expect(captured && typeof captured.get === 'function' ? captured.get('x-csrf-token') : captured['x-csrf-token']).toBe('abc');
         |                                                                                                                        ^
      23 |     } finally {
      24 |       (global as any).fetch = origFetch;
      25 |     }

      at Object.<anonymous> (unit/client.serverFetch.csrf.spec.ts:22:120)

PASS unit/middleware.coep.toggle.spec.ts
PASS unit/middleware.security-headers.spec.ts
FAIL unit/api.runtime.outcomes.jwks.rotation.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● runtime outcomes JWKS rotation › refreshes JWKS on verify failure

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200, 201]

      21 |     const req = new Request('http://localhost/api/runtime/outcomes', { method: 'POST', headers: { 'content-type': 'application/json', authorization: 'Bearer PROVIDERJWT' } as any, body: JSON.stringify({ courseId: 'c1', userId: 'u1', event: { type: 'attempt.completed', runtimeAttemptId: 'ra1', score: 1, max: 1, passed: true } }) } as any);
      22 |     const res = await route.POST(req as any);
    > 23 |     expect([200,201]).toContain(res.status);
         |                       ^
      24 |   });
      25 | });
      26 |

      at Object.<anonymous> (unit/api.runtime.outcomes.jwks.rotation.spec.ts:23:23)

PASS unit/api.admin.quotas.ratelimit.headers.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/db.rls.submissions.negative.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.courses.transfer-owner.audit.spec.ts
  ● Console

    console.error
      { issues: [ { path: 'id', message: 'Invalid uuid' } ] } dto_response_validation_failed

      24 |     : (typeof s?.parse === 'function' ? (() => { try { return { success: true, data: s.parse(data) }; } catch (e: any) { return { success: false, error: e }; } })() : { success: true, data });
      25 |   if (!parsed.success) {
    > 26 |     try { getRequestLogger(requestId).error({ issues: redactIssues(parsed.error.issues) }, 'dto_response_validation_failed'); } catch {}
         |                                       ^
      27 |     return NextResponse.json({ error: { code: 'INTERNAL', message: 'Invalid response shape' }, requestId }, { status: 500, headers: { 'x-request-id': requestId } });
      28 |   }
      29 |   return NextResponse.json(parsed.data, { status, headers: { 'x-request-id': requestId } });

      at jsonDto (../apps/web/src/lib/jsonDto.ts:26:39)
      at PATCH (../apps/web/src/app/api/courses/[id]/transfer-owner/route.ts:56:17)
      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:89:19)
      at Object.<anonymous> (unit/api.courses.transfer-owner.audit.spec.ts:26:17)

    console.log
      { ms: 2 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● courses transfer-owner audit › writes audit log (happy path)

    expect(received).toContain(expected) // indexOf

    Expected value: 500
    Received array: [200, 401, 403, 400]

      25 |     jest.spyOn(supa, 'getRouteHandlerSupabase').mockReturnValue(mock as any);
      26 |     const res = await (TransferPATCH as any)(req('http://localhost/api/courses/c1/transfer-owner', { teacher_id: '00000000-0000-0000-0000-000000000999' } as any), { params: { id: 'c1' } } as any);
    > 27 |     expect([200,401,403,400]).toContain(res.status);
         |                               ^
      28 |   });
      29 | });
      30 |

      at Object.<anonymous> (unit/api.courses.transfer-owner.audit.spec.ts:27:31)

FAIL unit/middleware.csp.frame-allow-header.spec.ts
  ● middleware CSP frame-src from x-frame-allow header › extends frame-src when header present

    expect(received).toMatch(expected)

    Expected pattern: /frame-src [^;]*https:\/\/frames\.example/
    Received string:  "default-src 'self'; script-src 'self' 'nonce-MzY5Yzg2YWEtZDQ0OC00MmExLWEwM2YtMGU4YmQyNzU4YzU2'; style-src 'self' 'unsafe-inline'; img-src 'self' data: blob:; connect-src 'self'; frame-ancestors 'none'; frame-src 'self';"

      32 |     const res: any = await (middleware as any)(req('http://localhost/', { 'x-frame-allow': 'https://frames.example' }));
      33 |     const csp = res.headers.get('Content-Security-Policy') || '';
    > 34 |     expect(csp).toMatch(/frame-src [^;]*https:\/\/frames\.example/);
         |                 ^
      35 |   });
      36 | });
      37 |

      at Object.<anonymous> (unit/middleware.csp.frame-allow-header.spec.ts:34:17)

PASS unit/api.notifications.prefs.auth.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.admin.quotas.auth.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.launch-token.license.allow.spec.ts
  ● Console

    console.error
      {
        ms: 0,
        err: '[\n' +
          '  {\n' +
          '    "validation": "uuid",\n' +
          '    "code": "invalid_string",\n' +
          '    "message": "Invalid uuid",\n' +
          '    "path": [\n' +
          '      "courseId"\n' +
          '    ]\n' +
          '  },\n' +
          '  {\n' +
          '    "validation": "url",\n' +
          '    "code": "invalid_string",\n' +
          '    "message": "Invalid url",\n' +
          '    "path": [\n' +
          '      "callbackUrl"\n' +
          '    ]\n' +
          '  }\n' +
          ']'
      } route_error

      119 |         decrInFlight(path);
      120 |       } catch {}
    > 121 |       log.error({ ms, err: err?.message }, "route_error");
          |           ^
      122 |       try {
      123 |         const url = (req as any)?.url as string | undefined;
      124 |         const path = url ? new URL(url).pathname : 'unknown';

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:121:11)
      at Object.<anonymous> (unit/api.launch-token.license.allow.spec.ts:19:17)

  ● launch-token license enforcement allow › LICENSE_ENFORCEMENT=1 with active license and seats remaining returns 200

    ZodError: [
      {
        "validation": "uuid",
        "code": "invalid_string",
        "message": "Invalid uuid",
        "path": [
          "courseId"
        ]
      },
      {
        "validation": "url",
        "code": "invalid_string",
        "message": "Invalid url",
        "path": [
          "callbackUrl"
        ]
      }
    ]

      74 |   const callbackUrl = `${process.env.NEXT_PUBLIC_BASE_URL ?? ''}/api/runtime/outcomes`;
      75 |   const claims = { sub: user.id, courseId: enr.course_id, role, exp, iat: Math.floor(Date.now() / 1000), nonce, scopes: (enr as any).scopes ?? [], callbackUrl };
    > 76 |   const payload = launchTokenClaims.parse(claims);
         |                                     ^
      77 |   const token = await signJwt(payload);
      78 |   try {
      79 |     // Record nonce for one-time-use validation (used_at null initially)

      at Object.get error [as error] (../node_modules/zod/v3/types.cjs:45:31)
      at ZodObject.parse (../node_modules/zod/v3/types.cjs:120:22)
      at POST (../apps/web/src/app/api/enrollments/[id]/launch-token/route.ts:76:37)
      at Object.POST (../apps/web/src/server/withRouteTiming.ts:89:19)
      at Object.<anonymous> (unit/api.launch-token.license.allow.spec.ts:19:17)

PASS unit/api.admin.export.usage-deadletters.csv.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.providers.get.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.quizzes.csrf.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● quizzes POST CSRF double-submit enforcement › missing or mismatched tokens -> 403; matching -> 201/500

    expect(received).toContain(expected) // indexOf

    Expected value: 401
    Received array: [201, 500]

      19 |     // matching
      20 |     res = await (QuizzesPOST as any)(post({ course_id: '00000000-0000-0000-0000-000000000001', title: 'Q' }, { 'x-test-auth': 'teacher', 'x-csrf-token': 't', cookie: 'csrf_token=t' }));
    > 21 |     expect([201,500]).toContain(res.status);
         |                       ^
      22 |   });
      23 | });
      24 |

      at Object.<anonymous> (unit/api.quizzes.csrf.spec.ts:21:23)

PASS unit/runtimeAuth.verify.spec.ts
PASS unit/api.quiz-choices.dto.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.files.guards-and-headers.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.headers.security.spec.ts
PASS unit/api.quiz-questions.dto.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.notifications.prefs.dto.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.files.upload-put.avscan.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.PUT (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.PUT (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● files upload PUT test-mode AV scan › rejects EICAR test string

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 403]

      13 |     const eicar = 'X5O!P%25@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*';
      14 |     const res = await (UploadPut as any)(put(url, headers, eicar));
    > 15 |     expect([400,401,403]).toContain(res.status);
         |                           ^
      16 |   });
      17 |
      18 |   test('accepts small benign text', async () => {

      at Object.<anonymous> (unit/api.files.upload-put.avscan.spec.ts:15:27)

PASS unit/api.health.spec.ts
FAIL unit/api.events.producers.spec.ts
  ● Console

    console.log
      {
        lessonId: 'aaaaaaaa-aaaa-aaaa-aaaa-000000000111',
        userId: '22222222-2222-2222-2222-222222222222',
        ms: 1
      } progress_marked

      at markLessonComplete (../apps/web/src/server/services/progress.ts:12:12)

  ● Event producers (TEST_MODE) › lesson complete records event

    expect(received).toBeTruthy()

    Received: undefined

       9 |     await markLessonComplete('22222222-2222-2222-2222-222222222222', 'aaaaaaaa-aaaa-aaaa-aaaa-000000000111');
      10 |     const ev = getInMemoryEvents().find(e => e.event_type === 'lesson.complete');
    > 11 |     expect(ev).toBeTruthy();
         |                ^
      12 |   });
      13 |
      14 |   test('submission create and grade records events', async () => {

      at Object.<anonymous> (unit/api.events.producers.spec.ts:11:16)

  ● Event producers (TEST_MODE) › submission create and grade records events

    expect(received).toBeTruthy()

    Received: undefined

      17 |     const sub = await createSubmissionApi({ assignment_id: 'aaaaaaaa-aaaa-aaaa-aaaa-000000000222', text: '' } as any, '22222222-2222-2222-2222-222222222222');
      18 |     const createEv = getInMemoryEvents().find(e => e.event_type === 'assignment.submit');
    > 19 |     expect(createEv).toBeTruthy();
         |                      ^
      20 |     await gradeSubmissionApi(sub.id, { score: 95 }, '11111111-1111-1111-1111-111111111111');
      21 |     const gradeEv = getInMemoryEvents().find(e => e.event_type === 'assignment.graded');
      22 |     expect(gradeEv).toBeTruthy();

      at Object.<anonymous> (unit/api.events.producers.spec.ts:19:22)

PASS unit/lib.cors.preflight.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.csrf.double-submit.negatives.spec.ts
FAIL unit/api.files.upload-url.quota.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● files upload-url quota enforcement › 413 when expected_bytes exceed remaining quota

    expect(received).toBe(expected) // Object.is equality

    Expected: 413
    Received: 200

      17 |     jest.spyOn(supa as any, 'getRouteHandlerSupabase').mockReturnValue(mock);
      18 |     const res = await (UploadUrlPOST as any)(post({ owner_type: 'user', owner_id: 'u1', content_type: 'image/png', expected_bytes: 200 }));
    > 19 |     expect(res.status).toBe(413);
         |                        ^
      20 |   });
      21 | });
      22 |

      at Object.<anonymous> (unit/api.files.upload-url.quota.spec.ts:19:24)

PASS unit/apiHandler.ratelimit.spec.ts
FAIL unit/api.reports.dto.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● reports endpoints headers and DTO-like responses › GET /api/reports/grade-distribution CSV includes header and x-request-id

    expect(received).toBeTruthy()

    Received: false

      20 |     expect(res.headers.get('x-request-id')).toBeTruthy();
      21 |     const ct = res.headers.get('content-type') || '';
    > 22 |     expect(ct.includes('text/csv')).toBeTruthy();
         |                                     ^
      23 |   });
      24 | });
      25 |

      at Object.<anonymous> (unit/api.reports.dto.spec.ts:22:37)

FAIL unit/api.notifications.patch.csrf.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● notifications preferences PATCH respects CSRF double-submit › 403 when tokens missing or mismatched; 200 when matched

    expect(received).toContain(expected) // indexOf

    Expected value: 401
    Received array: [200]

      17 |     // Match -> 200
      18 |     res = await (NotifPrefsPATCH as any)(patch({ origin: 'http://localhost', referer: 'http://localhost/p', cookie: 'csrf_token=t', 'x-csrf-token': 't', 'content-type': 'application/json' }));
    > 19 |     expect([200]).toContain(res.status);
         |                   ^
      20 |   });
      21 | });
      22 |

      at Object.<anonymous> (unit/api.notifications.patch.csrf.spec.ts:19:19)

PASS unit/api.submissions.csrf.negatives.spec.ts
FAIL unit/ui/TeacherAnnouncements.spec.tsx
  ● Teacher Announcements (labs) › renders course count and announcement list with jitter

    TypeError: c.getAll is not a function

      11 |   const h = headers();
      12 |   const c = cookies();
    > 13 |   const cookieHeader = h.get("cookie") ?? c.getAll().map(x => `${x.name}=${x.value}`).join("; ");
         |                                             ^
      14 |   const testAuth = h.get("x-test-auth") ?? c.get("x-test-auth")?.value;
      15 |
      16 |   const baseHeaders = { ...(cookieHeader ? { cookie: cookieHeader } : {}), ...(testAuth ? { "x-test-auth": testAuth } : {}) } as HeadersInit;

      at TeacherAnnouncementsPage (../apps/web/src/app/labs/teacher/announcements/page.tsx:13:45)
      at Object.<anonymous> (unit/ui/TeacherAnnouncements.spec.tsx:25:46)

FAIL unit/api.parent.progress.csv-json.auth.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 6 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● parent progress GET (CSV/JSON, auth roles) › admin CSV -> text/csv

    expect(received).toMatch(expected)

    Expected pattern: /text\/csv/
    Received string:  "application/json"

      28 |     expect([200,403,401]).toContain(res.status);
      29 |     if (res.status === 200) {
    > 30 |       expect(res.headers.get('content-type') || '').toMatch(/text\/csv/);
         |                                                     ^
      31 |     }
      32 |   });
      33 | });

      at Object.<anonymous> (unit/api.parent.progress.csv-json.auth.spec.ts:30:53)

PASS unit/api.user-profile.put.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.PUT (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PUT (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PUT (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/ui/TeacherCourseInsightsAdvanced.spec.tsx
  ● Console

    console.debug
      [serverFetch] 404 http://web:3022/api/courses 3ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

    console.debug
      [serverFetch] 404 http://web:3022/api/courses 2ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

    console.debug
      [serverFetch] 404 http://web:3022/api/lessons?course_id=00000000-0000-0000-0000-0000000000c1 2ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

    console.debug
      [serverFetch] 404 http://web:3022/api/lessons?course_id=00000000-0000-0000-0000-0000000000c1 2ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

PASS unit/api.admin.quotas.patch.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.notifications-preferences.rate-limit.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/client.serverFetch.request-id.spec.ts
  ● Console

    console.debug
      [serverFetch] 200 http://web:3022/api/health 0ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

PASS unit/api.files.download-url.dev-namespace.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.providers.create.negatives.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/schemas.announcement.spec.ts
PASS unit/rate-limit.headers.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/withRouteTiming.global-rate-limit.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.providers.create.happy-path.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/ui/SystemDiagnosticsSuite.spec.tsx
FAIL unit/env.validation.spec.ts
  ● environment validation › prod with TEST_MODE=1 throws unless explicitly allowed

    expect(received).toThrow(expected)

    Expected pattern: /TEST_MODE must not be enabled/

    Received function did not throw

      12 |   test('prod with TEST_MODE=1 throws unless explicitly allowed', () => {
      13 |     process.env = { ...original, NODE_ENV: 'production', TEST_MODE: '1' } as any;
    > 14 |     expect(() => loadServerEnv()).toThrow(/TEST_MODE must not be enabled/);
         |                                   ^
      15 |   });
      16 |
      17 |   test('invalid numeric values throw', () => {

      at Object.<anonymous> (unit/env.validation.spec.ts:14:35)

PASS unit/api.runtime.outcomes.export.headers.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/ui/StudentStudyDigest.spec.tsx
  ● Console

    console.debug
      [serverFetch] 404 http://web:3022/api/enrollments 1ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

    console.debug
      [serverFetch] 404 http://web:3022/api/enrollments 3ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

PASS unit/api.progress.student-map.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.messages.post.ratelimit.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● messages POST rate limit headers › returns 429 with standard headers when rate-limited

    expect(received).toBe(expected) // Object.is equality

    Expected: 429
    Received: 201

      19 |   test('returns 429 with standard headers when rate-limited', async () => {
      20 |     const res = await (MessagesPOST as any)(post({ thread_id: '00000000-0000-0000-0000-000000000001', body: 'hello' }));
    > 21 |     expect(res.status).toBe(429);
         |                        ^
      22 |     expect(res.headers.get('retry-after')).toBeTruthy();
      23 |     expect(res.headers.get('x-rate-limit-reset')).toBeTruthy();
      24 |     expect(res.headers.get('x-rate-limit-remaining')).toBe('0');

      at Object.<anonymous> (unit/api.messages.post.ratelimit.spec.ts:21:24)

PASS unit/server.withRouteTiming.ratelimit.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

FAIL unit/api.files.download-ownership.student.spec.ts
  ● Console

    console.error
      { ms: 0, err: "Cannot read properties of undefined (reading 'from')" } route_error

      119 |         decrInFlight(path);
      120 |       } catch {}
    > 121 |       log.error({ ms, err: err?.message }, "route_error");
          |           ^
      122 |       try {
      123 |         const url = (req as any)?.url as string | undefined;
      124 |         const path = url ? new URL(url).pathname : 'unknown';

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:121:11)
      at Object.<anonymous> (unit/api.files.download-ownership.student.spec.ts:17:17)

  ● files download ownership: enrolled student access › student enrolled in course can access lesson/announcement attachment

    TypeError: Cannot read properties of undefined (reading 'from')

      18 |   const supabase = getRouteHandlerSupabase();
      19 |   const expires = input.expiresIn ?? 300; // seconds
    > 20 |   const { data, error } = await (supabase as any).storage.from(input.bucket).createSignedUrl(input.objectKey, expires);
         |                                                           ^
      21 |   if (error) throw new Error(error.message);
      22 |   return (data as any).signedUrl as string;
      23 | }

      at presignDownloadUrl (../apps/web/src/lib/files.ts:20:59)
      at GET (../apps/web/src/app/api/files/download-url/route.ts:82:39)
      at Object.GET (../apps/web/src/server/withRouteTiming.ts:89:19)
      at Object.<anonymous> (unit/api.files.download-ownership.student.spec.ts:17:17)

PASS unit/api.files.access.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.providers.health.ratelimit.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.files.quota.enforcement.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.enrollments.launch-token.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/server.withRouteTiming.metrics.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.error
      { ms: 1, err: 'boom' } route_error

      119 |         decrInFlight(path);
      120 |       } catch {}
    > 121 |       log.error({ ms, err: err?.message }, "route_error");
          |           ^
      122 |       try {
      123 |         const url = (req as any)?.url as string | undefined;
      124 |         const path = url ? new URL(url).pathname : 'unknown';

      at ../apps/web/src/server/withRouteTiming.ts:121:11
      at Object.<anonymous> (unit/server.withRouteTiming.metrics.spec.ts:19:5)

PASS unit/apiHandler.requestId.spec.ts
PASS unit/services.assignments.spec.ts
FAIL unit/gateways/reports.gateway.spec.ts
  ● ReportsGateway › engagement returns counters (course scoped)

    expect(received).toBe(expected) // Object.is equality

    Expected: 3
    Received: 12

      15 |     }));
      16 |     const out = await createReportsGateway().engagement('c-1');
    > 17 |     expect(out.lessons).toBe(3);
         |                         ^
      18 |     expect(out.assignments).toBe(2);
      19 |   });
      20 |

      at Object.<anonymous> (unit/gateways/reports.gateway.spec.ts:17:25)

  ● ReportsGateway › gradeDistribution returns shape (admin/global)

    expect(received).toBe(expected) // Object.is equality

    Expected: 10
    Received: 42

      28 |     }));
      29 |     const out = await createReportsGateway().gradeDistribution();
    > 30 |     expect(out.total).toBe(10);
         |                       ^
      31 |     expect(out.dist[0].bucket).toBe('80-89');
      32 |   });
      33 | });

      at Object.<anonymous> (unit/gateways/reports.gateway.spec.ts:30:23)

PASS unit/services.messaging.spec.ts
PASS unit/ui/StudentLearningOverviewDetailed.spec.tsx
  ● Console

    console.debug
      [serverFetch] 404 http://web:3022/api/enrollments 3ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

    console.debug
      [serverFetch] 404 http://web:3022/api/enrollments 5ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

PASS unit/ui/StudentLearningOverviewAdvanced.spec.tsx
  ● Console

    console.debug
      [serverFetch] 404 http://web:3022/api/enrollments 4ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

    console.debug
      [serverFetch] 404 http://web:3022/api/enrollments 2ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

PASS unit/api.registry.versions.rate-limit.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.runtime.teacher.outcomes.rate-limit.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.problem-envelope.matrix.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.files.av-and-quota.negatives.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PUT (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.messages.scoping.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.runtime.checkpoint.preflight.spec.ts
PASS unit/api.messages.threads.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.messages.ratelimit.headers.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/middleware.coep.flag.spec.ts
PASS unit/api.modules.delete.auth.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.admin.metrics.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/services.submissions.queue.edges.spec.ts
PASS unit/api.runtime.auth.exchange.edgecases.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 4 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.flags.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.error
      {
        issues: [ { path: 'key', message: 'Expected boolean, received string' } ]
      } dto_response_validation_failed

      24 |     : (typeof s?.parse === 'function' ? (() => { try { return { success: true, data: s.parse(data) }; } catch (e: any) { return { success: false, error: e }; } })() : { success: true, data });
      25 |   if (!parsed.success) {
    > 26 |     try { getRequestLogger(requestId).error({ issues: redactIssues(parsed.error.issues) }, 'dto_response_validation_failed'); } catch {}
         |                                       ^
      27 |     return NextResponse.json({ error: { code: 'INTERNAL', message: 'Invalid response shape' }, requestId }, { status: 500, headers: { 'x-request-id': requestId } });
      28 |   }
      29 |   return NextResponse.json(parsed.data, { status, headers: { 'x-request-id': requestId } });

      at jsonDto (../apps/web/src/lib/jsonDto.ts:26:39)
      at PATCH (../apps/web/src/app/api/flags/route.ts:30:17)
      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:89:19)
      at Object.<anonymous> (unit/api.flags.spec.ts:17:16)

    console.log
      { ms: 2 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● Feature flags API (test-mode) › GET requires auth, returns list; PATCH validates key

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      16 |     // PATCH toggle a flag
      17 |     const ok = await route.PATCH(new Request('http://localhost/api/flags', { method: 'PATCH', headers: { 'content-type': 'application/json', 'x-test-auth': 'admin' }, body: JSON.stringify({ key: 'reports.enabled', value: true }) }) as any);
    > 18 |     expect(ok.status).toBe(200);
         |                       ^
      19 |   });
      20 | });
      21 |

      at Object.<anonymous> (unit/api.flags.spec.ts:18:23)

PASS unit/api.runtime.jwks.rotation.spec.ts
  ● Console

    console.log
      { ms: 21 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 3 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.reports.activity-retention.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.files.upload-url.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.runtime.auth.aud-and-scopes.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.courses.transfer-owner.ratelimit.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.assignments.delete.ratelimit.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.user.role.auth.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● user role update auth › admin -> 200 or 500 (service error tolerated)

    expect(received).toContain(expected) // indexOf

    Expected value: 401
    Received array: [200, 500]

      16 |   test('admin -> 200 or 500 (service error tolerated)', async () => {
      17 |     const res = await (RolePATCH as any)(patch('http://localhost/api/user/role', { 'x-test-auth': 'admin' }, { userId: '11111111-1111-1111-1111-111111111111', role: 'teacher' }));
    > 18 |     expect([200,500]).toContain(res.status);
         |                       ^
      19 |   });
      20 | });
      21 |

      at Object.<anonymous> (unit/api.user.role.auth.spec.ts:18:23)

PASS unit/api.providers.health.rate-limit.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.progress.rls.negatives.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/shared.env.loadServerEnv.spec.ts
PASS unit/api.files.download-url.dev-namespace.guard.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.parent-links.ratelimit.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.files.upload-url.ratelimit.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/ui/ParentAnnouncementsLab.spec.tsx
FAIL unit/api.attachments.delete.permissions.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● attachments delete permissions (smoke) › student can delete own attachment

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200, 401, 404]

      18 |     jest.spyOn(supa, 'getRouteHandlerSupabase').mockReturnValue(supabase as any);
      19 |     const res = await (AttachDELETE as any)(del('http://localhost/api/files/attachment?key=k'));
    > 20 |     expect([200,401,404]).toContain(res.status);
         |                           ^
      21 |   });
      22 | });
      23 |

      at Object.<anonymous> (unit/api.attachments.delete.permissions.spec.ts:20:27)

PASS unit/lib.serverFetch.extend.spec.ts
  ● Console

    console.debug
      [serverFetch] 200 http://example.com/api/x 0ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

    console.debug
      [serverFetch] 200 http://web:3022/api/demo 1ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

PASS unit/ui/StudentLearningOverview.spec.tsx
PASS unit/api.runtime.outcomes.list.headers.spec.ts
  ● Console

    console.log
      { ms: 6 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.runtime.grade.idempotency.spec.ts
  ● Console

    console.log
      { ms: 4 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 2 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.user.role.audit.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● user role PATCH audit log › admin role update writes audit_logs entry

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [200, 403, 401]

      14 |     jest.spyOn(supa as any, 'getRouteHandlerSupabase').mockReturnValue(mock);
      15 |     const res = await (RolePATCH as any)(patch({ userId: 'u1', role: 'teacher' }));
    > 16 |     expect([200,403,401]).toContain(res.status);
         |                           ^
      17 |     // Verify audit insert attempted
      18 |     expect(insertSpy).toHaveBeenCalled();
      19 |   });

      at Object.<anonymous> (unit/api.user.role.audit.spec.ts:16:27)

PASS unit/schemas.message.spec.ts
PASS unit/api.registry.courses.rate-limit.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.progress.per-student.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/server.withRouteTiming.csrf-double-submit.spec.ts
PASS unit/api.runtime.context.roles.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 3 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/schemas.submission.spec.ts
PASS unit/api.files.download-dev-namespace.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.runtime.teacher.outcomes.count-header.spec.ts
  ● Console

    console.error
      { issues: [ { path: '0.course_id', message: 'Invalid uuid' } ] } dto_response_validation_failed

      24 |     : (typeof s?.parse === 'function' ? (() => { try { return { success: true, data: s.parse(data) }; } catch (e: any) { return { success: false, error: e }; } })() : { success: true, data });
      25 |   if (!parsed.success) {
    > 26 |     try { getRequestLogger(requestId).error({ issues: redactIssues(parsed.error.issues) }, 'dto_response_validation_failed'); } catch {}
         |                                       ^
      27 |     return NextResponse.json({ error: { code: 'INTERNAL', message: 'Invalid response shape' }, requestId }, { status: 500, headers: { 'x-request-id': requestId } });
      28 |   }
      29 |   return NextResponse.json(parsed.data, { status, headers: { 'x-request-id': requestId } });

      at jsonDto (../apps/web/src/lib/jsonDto.ts:26:39)
      at GET (../apps/web/src/app/api/runtime/teacher/outcomes/route.ts:43:22)
      at Object.GET (../apps/web/src/server/withRouteTiming.ts:89:19)
      at Object.<anonymous> (unit/api.runtime.teacher.outcomes.count-header.spec.ts:17:17)

    console.log
      { ms: 2 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● runtime teacher outcomes count header › sets x-total-count when count is available

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      16 |
      17 |     const res = await (TeacherOutcomesGET as any)(get('http://localhost/api/runtime/teacher/outcomes'));
    > 18 |     expect(res.status).toBe(200);
         |                        ^
      19 |     expect(res.headers.get('x-total-count')).toBe('123');
      20 |   });
      21 | });

      at Object.<anonymous> (unit/api.runtime.teacher.outcomes.count-header.spec.ts:18:24)

PASS unit/api.runtime.progress.idempotency.spec.ts
  ● Console

    console.log
      { ms: 4 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 2 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/lib.metrics.inflight.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

  ● metrics in-flight tracking › increments and decrements per route

    expect(received).toBe(expected) // Object.is equality

    Expected: 2
    Received: 0

      21 |     incrInFlight(route);
      22 |     let s1 = snapshot();
    > 23 |     expect((s1[route]?.in_flight || 0)).toBe(before + 2);
         |                                         ^
      24 |     decrInFlight(route);
      25 |     decrInFlight(route);
      26 |     s1 = snapshot();

      at Object.<anonymous> (unit/lib.metrics.inflight.spec.ts:23:41)

PASS unit/api.runtime.outcomes.list.count-header.spec.ts
  ● Console

    console.log
      { ms: 7 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.lessons.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.messages.list.rate-limit.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.role.access.matrix.spec.ts
  ● Console

    console.debug
      { ms: 0 } dash_student_widgets

      at getStudentDashboard (../apps/web/src/server/services/dashboard.ts:134:12)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.debug
      { ms: 0 } dash_teacher_widgets

      at getTeacherDashboard (../apps/web/src/server/services/dashboard.ts:51:12)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.admin.dlq.auth.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.assignments.delete.ratelimit.headers.spec.ts
  ● Console

    console.error
      {
        issues: [
          { path: 'id', message: 'Required' },
          { path: 'course_id', message: 'Required' },
          { path: 'title', message: 'Required' },
          { path: 'created_at', message: 'Required' }
        ]
      } dto_response_validation_failed

      24 |     : (typeof s?.parse === 'function' ? (() => { try { return { success: true, data: s.parse(data) }; } catch (e: any) { return { success: false, error: e }; } })() : { success: true, data });
      25 |   if (!parsed.success) {
    > 26 |     try { getRequestLogger(requestId).error({ issues: redactIssues(parsed.error.issues) }, 'dto_response_validation_failed'); } catch {}
         |                                       ^
      27 |     return NextResponse.json({ error: { code: 'INTERNAL', message: 'Invalid response shape' }, requestId }, { status: 500, headers: { 'x-request-id': requestId } });
      28 |   }
      29 |   return NextResponse.json(parsed.data, { status, headers: { 'x-request-id': requestId } });

      at jsonDto (../apps/web/src/lib/jsonDto.ts:26:39)
      at DELETE (../apps/web/src/app/api/assignments/route.ts:143:17)
      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:89:19)
      at Object.<anonymous> (unit/api.assignments.delete.ratelimit.headers.spec.ts:13:5)

    console.log
      { ms: 1 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.error
      {
        issues: [
          { path: 'id', message: 'Required' },
          { path: 'course_id', message: 'Required' },
          { path: 'title', message: 'Required' },
          { path: 'created_at', message: 'Required' }
        ]
      } dto_response_validation_failed

      24 |     : (typeof s?.parse === 'function' ? (() => { try { return { success: true, data: s.parse(data) }; } catch (e: any) { return { success: false, error: e }; } })() : { success: true, data });
      25 |   if (!parsed.success) {
    > 26 |     try { getRequestLogger(requestId).error({ issues: redactIssues(parsed.error.issues) }, 'dto_response_validation_failed'); } catch {}
         |                                       ^
      27 |     return NextResponse.json({ error: { code: 'INTERNAL', message: 'Invalid response shape' }, requestId }, { status: 500, headers: { 'x-request-id': requestId } });
      28 |   }
      29 |   return NextResponse.json(parsed.data, { status, headers: { 'x-request-id': requestId } });

      at jsonDto (../apps/web/src/lib/jsonDto.ts:26:39)
      at DELETE (../apps/web/src/app/api/assignments/route.ts:143:17)
      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:89:19)
      at Object.<anonymous> (unit/api.assignments.delete.ratelimit.headers.spec.ts:14:17)

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.reports.activity.retention.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.messages.threads.rate-limit.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.messages.list.ratelimit.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.reports.engagement.csv-json.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● reports engagement CSV/JSON › CSV returns text/csv when requested

    expect(received).toMatch(expected)

    Expected pattern: /text\/csv/
    Received string:  "application/json"

      16 |     expect([200,401,403]).toContain(res.status);
      17 |     if (res.status === 200) {
    > 18 |       expect(res.headers.get('content-type') || '').toMatch(/text\/csv/);
         |                                                     ^
      19 |     }
      20 |   });
      21 | });

      at Object.<anonymous> (unit/api.reports.engagement.csv-json.spec.ts:18:53)

PASS unit/api.runtime.outcomes.export.auth.spec.ts
  ● Console

    console.log
      { ms: 15 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.lessons.complete.idempotent.spec.ts
  ● Console

    console.log
      {
        lessonId: '00000000-0000-0000-0000-00000000aa11',
        userId: '22222222-2222-2222-2222-222222222222',
        ms: 0
      } progress_marked

      at markLessonComplete (../apps/web/src/server/services/progress.ts:12:12)

    console.log
      { ms: 2 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      {
        lessonId: '00000000-0000-0000-0000-00000000aa11',
        userId: '22222222-2222-2222-2222-222222222222',
        ms: 0
      } progress_marked

      at markLessonComplete (../apps/web/src/server/services/progress.ts:12:12)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.files.download-url.disposition.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/services.modules.spec.ts
PASS unit/api.admin.audit-logs.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/ui/SystemPercentileTrends.spec.tsx
PASS unit/schemas.lesson.spec.ts
PASS unit/api.messages.patch.ratelimit.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.analytics.events.emit.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/ui/AdminReports.spec.tsx
  ● Console

    console.error
      Warning: Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
      1. You might have mismatching versions of React and the renderer (such as React DOM)
      2. You might be breaking the Rules of Hooks
      3. You might have more than one copy of React in the same app
      See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.

       6 |
       7 | export default function AdminReportsPage() {
    >  8 |   const [usageRows, setUsageRows] = useState<any[]>([]);
         |                                             ^
       9 |   const [usageError, setUsageError] = useState<string | null>(null);
      10 |   const [usageLoading, setUsageLoading] = useState(false);
      11 |

      at printWarning (../node_modules/react/cjs/react.development.js:209:30)
      at error (../node_modules/react/cjs/react.development.js:183:7)
      at resolveDispatcher (../node_modules/react/cjs/react.development.js:1592:7)
      at useState (../node_modules/react/cjs/react.development.js:1621:20)
      at AdminReportsPage (../apps/web/src/app/dashboard/admin/reports/page.tsx:8:45)
      at Object.<anonymous> (unit/ui/AdminReports.spec.tsx:18:38)

  ● Admin Reports (dashboard) › renders reports tiles

    TypeError: Cannot read properties of null (reading 'useState')

       6 |
       7 | export default function AdminReportsPage() {
    >  8 |   const [usageRows, setUsageRows] = useState<any[]>([]);
         |                                             ^
       9 |   const [usageError, setUsageError] = useState<string | null>(null);
      10 |   const [usageLoading, setUsageLoading] = useState(false);
      11 |

      at useState (../node_modules/react/cjs/react.development.js:1622:21)
      at AdminReportsPage (../apps/web/src/app/dashboard/admin/reports/page.tsx:8:45)
      at Object.<anonymous> (unit/ui/AdminReports.spec.tsx:18:38)

PASS unit/api.user-profile.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PUT (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/db.rls.announcements.negative.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.internal.metrics.token.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/db.rls.parent-links.negative.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.modules.delete.ratelimit.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.admin.quotas.ratelimit.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/gateways/enrollments.gateway.spec.ts
  ● Console

    console.debug
      [serverFetch] 200 http://web:3022/api/enrollments 1ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

    console.debug
      [serverFetch] 200 http://web:3022/api/enrollments 0ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

FAIL unit/db.rls.courses.negative.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.DELETE (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● Courses RLS/authorization negatives › student cannot create course

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [401, 403]

      4 |     const req = new Request('http://localhost/api/courses', { method: 'POST', headers: { 'content-type': 'application/json', 'x-test-auth': 'student' } as any, body: JSON.stringify({ title: 'X', description: '' }) } as any);
      5 |     const res = await (route as any).POST(req as any);
    > 6 |     expect([401,403]).toContain(res.status);
        |                       ^
      7 |   });
      8 |
      9 |   test('student cannot delete course', async () => {

      at Object.<anonymous> (unit/db.rls.courses.negative.spec.ts:6:23)

PASS unit/api.reports.grade-distribution.csv-json.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.providers.health.ratelimit.headers.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/schemas.assignment.spec.ts
FAIL unit/api.submissions.list.pagination.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● GET /api/submissions pagination headers › returns x-total-count and clamps limit to 200

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 403

      12 |     (globalThis as any).__TEST_HEADERS_STORE__.cookies.set('x-test-auth', 'teacher');
      13 |     const res = await (SubmissionsGET as any)(new Request('http://localhost/api/submissions?assignment_id=00000000-0000-0000-0000-000000000001&offset=0&limit=999') as any);
    > 14 |     expect(res.status).toBe(200);
         |                        ^
      15 |     const total = res.headers.get('x-total-count');
      16 |     expect(Number(total)).toBeGreaterThanOrEqual(0);
      17 |   });

      at Object.<anonymous> (unit/api.submissions.list.pagination.spec.ts:14:24)

PASS unit/api.runtime.checkpoint.roundtrip.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/logger.redaction.spec.ts
PASS unit/api.submissions.grade.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/ui/StudentUpcomingLessons.spec.tsx
PASS unit/api.notifications.auth.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/ui/SystemObserver.spec.tsx
FAIL unit/lib.runtimeAuth.scopes-aud.spec.ts
  ● runtimeAuth audience and scopes › rejects when aud mismatches allowed origin

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    /workspace/tests/node_modules/jose/dist/webapi/index.js:1
    ({"Object.<anonymous>":function(module,exports,require,__dirname,__filename,jest){export { compactDecrypt } from './jwe/compact/decrypt.js';
                                                                                      ^^^^^^

    SyntaxError: Unexpected token 'export'

      10 |     // Mock getRequestOrigin to return allowed origin and jose verify to return payload with different aud
      11 |     jest.spyOn(require('../../apps/web/src/lib/cors'), 'getRequestOrigin').mockReturnValue('https://good.example' as any);
    > 12 |     jest.spyOn(require('jose') as any, 'jwtVerify').mockResolvedValue({ payload: { aud: 'https://bad.example', scopes: [] } });
         |                ^
      13 |     const out = verifyRuntimeAuthorization(req as any, [] as any) as any;
      14 |     expect(out).toBeTruthy();
      15 |   });

      at Runtime.createScriptFromCode (../node_modules/jest-runtime/build/index.js:1505:14)
      at Object.<anonymous> (unit/lib.runtimeAuth.scopes-aud.spec.ts:12:16)

PASS unit/ui/SystemHealthHistory.spec.tsx
FAIL unit/lib.runtimeAuth.clockskew.spec.ts
  ● runtimeAuth clock skew tolerance › accepts tokens within tolerance window (dev HS256 path mocked)

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      12 |     const req = new Request('http://localhost/api/runtime/progress', { headers: { authorization: 'Bearer X', origin: 'https://wcgyhwvugdnzhegwiiam.lovable.app' } as any } as any);
      13 |     const out: any = await (verifyRuntimeAuthorization as any)(req as any, ['progress.write']);
    > 14 |     expect(out.ok).toBe(true);
         |                    ^
      15 |   });
      16 | });
      17 |

      at Object.<anonymous> (unit/lib.runtimeAuth.clockskew.spec.ts:14:20)

PASS unit/ui/TeacherCourseInsights.spec.tsx
PASS unit/api.reports.usage.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/lib.rateLimit.redis-fallback.spec.ts
PASS unit/api.runtime.idempotency.progress.spec.ts
  ● Console

    console.log
      { ms: 14 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 7 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.runtime.outcomes.iss-aud.negatives.spec.ts
  ● Console

    console.log
      { ms: 19 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/ui/SystemRequestId.spec.tsx
  ● Console

    console.debug
      [serverFetch] 404 http://web:3022/api/health 3ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

PASS unit/ui/SystemLatencySampler.spec.tsx
PASS unit/lib.csp.frame-src-allow.spec.ts
PASS unit/db.rls.quiz-attempts.negative.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.registry.licenses.auth.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.dashboard.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.debug
      { ms: 0 } dash_teacher_widgets

      at getTeacherDashboard (../apps/web/src/server/services/dashboard.ts:51:12)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.submissions.grade.validation.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.messages.threads.auth.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/db.rls.messages.negative.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.problem.envelope.codes.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/ui/SystemUptimeTile.spec.tsx
PASS unit/schemas.files.spec.ts
PASS unit/api.messages.patch-negatives.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.reports.grade-distribution.empty.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/lib.serverFetch.baseurl.spec.ts
PASS unit/ui/StudentProfile.spec.tsx
  ● Console

    console.debug
      [serverFetch] 404 http://web:3022/api/user/profile 19ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

PASS unit/modules.update.spec.ts
PASS unit/services.assignments.producer.spec.ts
PASS unit/api.reports.engagement.headers.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/ui/StudentPlanner.spec.tsx
PASS unit/server.scheduler.spec.ts
PASS unit/ui/SystemRoleBadge.spec.tsx
PASS unit/api.user.profile.auth.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PUT (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.runtime.outcomes.preflight.spec.ts
FAIL unit/ui/SystemAuthCheck.spec.tsx
  ● Console

    console.debug
      [serverFetch] 404 http://web:3022/api/user/profile 3ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

  ● System Auth Check (labs) › renders email and role when authenticated

    expect(element).toHaveTextContent()

    Expected element to have text content:
      t@example.com
    Received:
      s@example.com

      15 |     const ui = await AuthCheckPage();
      16 |     render(ui);
    > 17 |     expect(await screen.findByTestId('auth-email')).toHaveTextContent('t@example.com');
         |                                                     ^
      18 |     expect(await screen.findByTestId('auth-role')).toHaveTextContent('teacher');
      19 |   });
      20 | });

      at Object.<anonymous> (unit/ui/SystemAuthCheck.spec.tsx:17:53)

PASS unit/api.pagination.params.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/api.parent.progress.api.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 11 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● API /api/parent/progress (TEST_MODE) › parent linked to student gets data

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 403

      15 |     globalThis.__TEST_HEADERS_STORE__?.cookies?.set?.('x-test-auth', 'parent');
      16 |     const res = await (ParentProgressGET as any)(makeGet('http://localhost/api/parent/progress?student_id=22222222-2222-2222-2222-222222222222'));
    > 17 |     expect(res.status).toBe(200);
         |                        ^
      18 |   });
      19 | });
      20 |

      at Object.<anonymous> (unit/api.parent.progress.api.spec.ts:17:24)

PASS unit/api.files.upload-url.content-type.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/ui/ParentChildrenReport.spec.tsx
  ● Parent Children Report (labs) › renders total and items

    Unable to find an element by: [data-testid="children-total"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<main[39m
          [33mclass[39m=[32m"p-6"[39m
        [36m>[39m
          [36m<a[39m
            [33mclass[39m=[32m"text-blue-600 underline"[39m
            [33mhref[39m=[32m"/login"[39m
          [36m>[39m
            [0mSign in[0m
          [36m</a>[39m
        [36m</main>[39m
      [36m</div>[39m
    [36m</body>[39m

      17 |     const ui = await ParentChildrenReportPage();
      18 |     render(ui);
    > 19 |     expect(await screen.findByTestId('children-total')).toHaveTextContent('1');
         |                         ^
      20 |   });
      21 | });
      22 |

      at waitForWrapper (../node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at ../node_modules/@testing-library/dom/dist/query-helpers.js:86:33
      at Object.<anonymous> (unit/ui/ParentChildrenReport.spec.tsx:19:25)

PASS unit/services.notifications.spec.ts
FAIL unit/ui/SystemOkCard.spec.tsx
  ● System OK Card (labs) › renders ok and ts (human) on success

    TypeError: cookieStore.getAll is not a function

      22 |
      23 |   const cookieHeader = cookieStore
    > 24 |     .getAll()
         |      ^
      25 |     .map((c) => `${c.name}=${c.value}`)
      26 |     .join("; ");
      27 |   const xTestAuth = incomingHeaders.get("x-test-auth") ?? cookieStore.get("x-test-auth")?.value;

      at SystemOkCardPage (../apps/web/src/app/labs/system/ok-card/page.tsx:24:6)
      at Object.<anonymous> (unit/ui/SystemOkCard.spec.tsx:16:38)

PASS unit/api.reports.grade-distribution.headers.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/lib.logger.redaction.extended.spec.ts
  ● logger redaction extended fields › redact list contains email, message.body, attachments.object_key

    Cannot find module 'pino' from 'unit/lib.logger.redaction.extended.spec.ts'

       5 |     jest.resetModules();
       6 |     pinoCalls = [];
    >  7 |     jest.doMock('pino', () => {
         |          ^
       8 |       const mock = (...args: any[]) => { pinoCalls.push(args[0] || {}); return { child: () => ({ info: () => {}, error: () => {} }) } as any; };
       9 |       return { __esModule: true, default: mock };
      10 |     });

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.<anonymous> (unit/lib.logger.redaction.extended.spec.ts:7:10)

  ● logger redaction extended fields › redact list contains email, message.body, attachments.object_key

    Cannot find module 'pino' from 'unit/lib.logger.redaction.extended.spec.ts'

      10 |     });
      11 |   });
    > 12 |   afterEach(() => { jest.dontMock('pino'); process.env = original; });
         |                          ^
      13 |
      14 |   test('redact list contains email, message.body, attachments.object_key', async () => {
      15 |     await import('../../apps/web/src/lib/logger');

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.<anonymous> (unit/lib.logger.redaction.extended.spec.ts:12:26)

PASS unit/services.submissions.spec.ts
PASS unit/api.runtime.asset.sign-url.preflight.spec.ts
PASS unit/gateways/announcements.gateway.spec.ts
  ● Console

    console.debug
      [serverFetch] 200 http://web:3022/api/announcements 0ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

PASS unit/sdk.fetchJson.spec.ts
  ● Console

    console.debug
      [serverFetch] 400 http://web:3022/x 1ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

    console.debug
      [serverFetch] 200 http://web:3022/y 0ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

PASS unit/schemas.progress.spec.ts
PASS unit/api.runtime.outcomes.iss-aud.strict.spec.ts
  ● Console

    console.log
      { ms: 16 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.notifications.guard.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/ui/TeacherCourseCardsWithCounts.spec.tsx
PASS unit/api.runtime.events.preflight.spec.ts
PASS unit/api.health.requiredEnvs.spec.ts
PASS unit/api.routeTiming.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at ../apps/web/src/server/withRouteTiming.ts:107:11

    console.error
      { ms: 0, err: 'boom' } route_error

      119 |         decrInFlight(path);
      120 |       } catch {}
    > 121 |       log.error({ ms, err: err?.message }, "route_error");
          |           ^
      122 |       try {
      123 |         const url = (req as any)?.url as string | undefined;
      124 |         const path = url ? new URL(url).pathname : 'unknown';

      at ../apps/web/src/server/withRouteTiming.ts:121:11
      at Object.<anonymous> (unit/api.routeTiming.spec.ts:13:5)

PASS unit/ui/TeacherPrintPages.spec.tsx
PASS unit/api.runtime.grade.cors.preflight.spec.ts
PASS unit/ui/NotificationsInboxPage.spec.tsx
PASS unit/ui/DropdownMenu.spec.tsx
PASS unit/api.submissions.get-required.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.internal.metrics.auth.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/ui/ParentChildren.spec.tsx
  ● Parent Children (labs) › renders list with one linked student

    Unable to find an element by: [data-testid="children-list"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<main[39m
          [33mclass[39m=[32m"p-6"[39m
        [36m>[39m
          [36m<a[39m
            [33mclass[39m=[32m"text-blue-600 underline"[39m
            [33mhref[39m=[32m"/login"[39m
          [36m>[39m
            [0mSign in[0m
          [36m</a>[39m
        [36m</main>[39m
      [36m</div>[39m
    [36m</body>[39m

      15 |     const ui = await ParentChildrenListPage();
      16 |     render(ui);
    > 17 |     await screen.findByTestId('children-list');
         |                  ^
      18 |   });
      19 | });
      20 |

      at waitForWrapper (../node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at ../node_modules/@testing-library/dom/dist/query-helpers.js:86:33
      at Object.<anonymous> (unit/ui/ParentChildren.spec.tsx:17:18)

PASS unit/api.messages.list.pagination.params.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.files.upload-url.allowed-mime.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.runtime.context.dto-requestid.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.internal.metrics.content-type.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.runtime.outcomes.alg-kid-iss-aud.spec.ts
  ● Console

    console.log
      { ms: 19 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.messages.threads.pagination.params.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

FAIL unit/middleware.coep.spec.ts
  ● COEP header behavior › COEP header absent by default

    TypeError: (0 , middleware_1.middleware) is not a function

      11 |   test('COEP header absent by default', () => {
      12 |     process.env = { ...orig, COEP: '0' } as any;
    > 13 |     const res = middleware(makeReq());
         |                           ^
      14 |     expect(res.headers.get('Cross-Origin-Embedder-Policy')).toBeNull();
      15 |   });
      16 |

      at Object.<anonymous> (unit/middleware.coep.spec.ts:13:27)

  ● COEP header behavior › COEP header present when enabled

    TypeError: (0 , middleware_1.middleware) is not a function

      17 |   test('COEP header present when enabled', () => {
      18 |     process.env = { ...orig, COEP: '1' } as any;
    > 19 |     const res = middleware(makeReq());
         |                           ^
      20 |     expect(res.headers.get('Cross-Origin-Embedder-Policy')).toBe('require-corp');
      21 |   });
      22 | });

      at Object.<anonymous> (unit/middleware.coep.spec.ts:19:27)

PASS unit/api.reports.csv.content-type.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/schemas.quiz.extend2.spec.ts
PASS unit/ui/TeacherAnalyticsLab.spec.tsx
PASS unit/api.runtime.context.audience.spec.ts
  ● Console

    console.log
      { ms: 2 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.dashboard.teacher-kpis.spec.ts
  ● Console

    console.debug
      { ms: 0 } dash_teacher_widgets

      at getTeacherDashboard (../apps/web/src/server/services/dashboard.ts:51:12)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.providers.list.dto.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/services.parentLinks.spec.ts
PASS unit/schemas.strictness.spec.ts
PASS unit/schemas.auth.spec.ts
PASS unit/api.reports.export.headers.spec.ts
  ● Console

    console.log
      { ms: 13 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.notifications.read-all.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.progress.request-id.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/ui/DarkModeToggle.spec.tsx
PASS unit/api.runtime.teacher.outcomes.headers.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.user.role.headers.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.files.download-url.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.providers.health.summaries.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.messages.read-all-thread.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/schemas.parentLink.spec.ts
FAIL unit/lib.testMode.spec.ts
  ● testMode › isTestMode false otherwise

    expect(received).toBe(expected) // Object.is equality

    Expected: false
    Received: true

      22 |     delete (process.env as any).TEST_MODE;
      23 |     delete (process.env as any).PLAYWRIGHT;
    > 24 |     expect(isTestMode()).toBe(false);
         |                          ^
      25 |   });
      26 | });
      27 |

      at Object.<anonymous> (unit/lib.testMode.spec.ts:24:26)

PASS unit/gateways.registry.pagination.spec.ts
PASS unit/api.assignments.patch-missing-id.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.user.profile.headers.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.providers.health.summaries.auth.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.progress.teacher-counts.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/schemas.event.spec.ts
FAIL unit/api.messages.guard.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

  ● api.messages guard (MVP_PROD_GUARD) › guard enforced in production-like (non test-mode)

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [401, 501]

      11 |     const res = await (MessagesGET as any)(makeReq('http://localhost/api/messages?thread_id=th1', { 'x-test-auth': 'student' }));
      12 |     // In non test-mode, auth may fail or MVP guard may block; accept 401 or 501
    > 13 |     expect([401, 501]).toContain(res.status);
         |                        ^
      14 |   });
      15 | });
      16 |

      at Object.<anonymous> (unit/api.messages.guard.spec.ts:13:24)

PASS unit/api.submissions.list.total-count.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/ui/telemetry.spec.tsx
PASS unit/api.assignments.list.total-count.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.messages.missing-thread.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.messages.list.total-count.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.admin.metrics.sanitize-labels.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.registry.versions.dto.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.assignments.list.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.teacher.grading-queue.auth.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.admin.metrics.auth.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.admin.export.auth.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.quizzes.list.total-count.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.modules.list.total-count.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/db.rls.registry.negative.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.admin.usage.shape.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/gateways.messages.port-flag.spec.ts
PASS unit/api.admin.export.notifications.csv.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.registry.versions.approve-disable.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.lessons.list.total-count.spec.ts
PASS unit/api.admin.metrics.text.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.assignments.patch-empty-body.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.admin.metrics.accept-text.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.admin.audit-logs.auth.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/schemas.env.numeric-bounds.spec.ts
PASS unit/lib.paginate.edgecases.spec.ts
PASS unit/lib.zodQuery.spec.ts
PASS unit/api.admin.dlq.admin.patch.spec.ts
  ● Console

    console.log
      { ms: 2 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/ui/SettingsPage.spec.tsx
PASS unit/schemas.enrollment.spec.ts
PASS unit/lib.rateLimit.spec.ts
PASS unit/services.courses.spec.ts
PASS unit/api.request-id.on.error.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/lib.idempotency.ttl.spec.ts
PASS unit/api.enrollments.list.total-count.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.assignments.query-strict.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/schemas.env.spec.ts
PASS unit/api.notifications.list.total-count.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.reports.activity.headers.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.registry.versions.total-count.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.reports.retention.headers.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/ui/TeacherCoursesGrid.spec.tsx
PASS unit/api.request-id.on.success.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/gateways/users.gateway.spec.ts
  ● Console

    console.debug
      [serverFetch] 200 http://web:3022/api/user/role 0ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

FAIL unit/middleware.reject-x-test-auth.spec.ts
  ● middleware rejects x-test-auth in non-test env › 403 when x-test-auth present and TEST_MODE not enabled

    TypeError: (0 , middleware_1.middleware) is not a function

      11 |   test('403 when x-test-auth present and TEST_MODE not enabled', () => {
      12 |     process.env = { ...orig, TEST_MODE: '0' } as any;
    > 13 |     const res = middleware(makeReq({ 'x-test-auth': 'student' }));
         |                           ^
      14 |     expect([403,200]).toContain(res.status);
      15 |   });
      16 | });

      at Object.<anonymous> (unit/middleware.reject-x-test-auth.spec.ts:13:27)

PASS unit/schemas.problem.spec.ts
PASS unit/db.rls.notifications.negative.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.runtime.outcomes.options.spec.ts
PASS unit/api.auth.logout.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/ui/StudentEnrollmentsGrid.spec.tsx
PASS unit/services.files.signing.spec.ts
PASS unit/api.ready.payload.spec.ts
PASS unit/db.rls.quiz-choices.negative.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/gateways/flags.gateway.spec.ts
  ● Console

    console.debug
      [serverFetch] 200 http://web:3022/api/flags 0ms

      at serverFetch (../apps/web/src/lib/serverFetch.ts:102:13)

PASS unit/db.rls.quiz-questions.negative.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/schemas.notification.spec.ts
PASS unit/gateways.registry.filters.spec.ts
PASS unit/schemas.course.spec.ts
PASS unit/db.rls.providers.negative.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/db.rls.lessons.negative.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.health.payload.spec.ts
PASS unit/lib.jobs.run-now.spec.ts
  ● Console

    console.log
      { job: 'test_job' } job_run_start

      at Object.runScheduledJobNow (../apps/web/src/lib/jobs.ts:47:78)

    console.log
      { job: 'test_job' } job_run_end

      at Object.runScheduledJobNow (../apps/web/src/lib/jobs.ts:56:78)

PASS unit/db.rls.enrollments.negative.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/schemas.quiz.extend.spec.ts
PASS unit/db.rls.modules.negative.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/db.rls.quizzes.negative.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.dashboard.dto.spec.ts
  ● Console

    console.debug
      { ms: 0 } dash_teacher_widgets

      at getTeacherDashboard (../apps/web/src/server/services/dashboard.ts:51:12)

PASS unit/ports.messaging.contract.spec.ts
PASS unit/db.rls.messages.readall.negative.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/ui/SystemHealth.spec.tsx
PASS unit/lib.metrics.cardinality.spec.ts
PASS unit/services.progress.spec.ts
  ● Console

    console.log
      {
        lessonId: '11111111-1111-1111-1111-111111111111',
        userId: 'test-student-id',
        ms: 0
      } progress_marked

      at markLessonComplete (../apps/web/src/server/services/progress.ts:12:12)

PASS unit/db.rls.files.finalize.negative.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.POST (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.parent.progress.ui.spec.tsx
PASS unit/api.notifications.read-all.auth.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/lib.csp.headers.spec.ts
PASS unit/runtime.headers.vary.origin.spec.ts
PASS unit/api.admin.usage.auth.spec.ts
  ● Console

    console.log
      { ms: 1 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/api.runtime.checkpoint.spec.ts
PASS unit/api.runtime.jwks.rotation.positive.spec.ts
PASS unit/admin.outcomes.csv-link.spec.ts
PASS unit/db.rls.interactive_attempts.negative.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/services.users.spec.ts
PASS unit/db.rls.reports.negative.spec.ts
  ● Console

    console.log
      { ms: 0 } route_success

      at Object.GET (../apps/web/src/server/withRouteTiming.ts:107:11)

PASS unit/schemas.dashboard.parent.spec.ts
PASS unit/future.analytics.spec.ts
PASS unit/future.access-control.spec.ts
PASS unit/schemas.assignment.extend.spec.ts
PASS unit/api.runtime.asset-sign-url.spec.ts
PASS unit/future.profile-avatar.spec.ts
PASS unit/example.spec.ts
PASS unit/api.events.spec.ts

Summary of all failing tests
FAIL unit/future.messaging.spec.ts
  ● Epic E: Messaging (MVP) › marks message as read for the current user and updates unread badge

    TypeError: Cannot read properties of undefined (reading 'unread')

      78 |     const listRes = await threads.GET(new Request('http://localhost/api/messages/threads', { headers: { 'x-test-auth': 'student' } }) as any);
      79 |     const list = await listRes.json();
    > 80 |     expect(list[0].unread).toBe(0);
         |                    ^
      81 |   });
      82 |   test('enforces permissions: unauthenticated yields 401', async () => {
      83 |     // clear test auth

      at Object.<anonymous> (unit/future.messaging.spec.ts:80:20)

  ● Epic E: Messaging (MVP) › PATCH /api/messages/threads/[id]/read-all zeroes unread for current user

    TypeError: Cannot read properties of undefined (reading 'unread')

      110 |     const listRes = await threads.GET(new Request('http://localhost/api/messages/threads', { headers: { 'x-test-auth': 'student' } }) as any);
      111 |     const list = await listRes.json();
    > 112 |     expect(list[0].unread).toBe(0);
          |                    ^
      113 |   });
      114 |
      115 |   test('messages list sorted by created_at and unread increments after new message', async () => {

      at Object.<anonymous> (unit/future.messaging.spec.ts:112:20)

  ● Epic E: Messaging (MVP) › messages list sorted by created_at and unread increments after new message

    TypeError: Cannot read properties of undefined (reading 'unread')

      138 |     const listThreads = await threads.GET(new Request('http://localhost/api/messages/threads', { headers: { 'x-test-auth': 'student' } }) as any);
      139 |     const ts = await listThreads.json();
    > 140 |     expect(ts[0].unread).toBeGreaterThan(0);
          |                  ^
      141 |   });
      142 |
      143 |   test('PATCH /api/messages without id returns 400 and unknown id returns 404', async () => {

      at Object.<anonymous> (unit/future.messaging.spec.ts:140:18)

FAIL unit/api.runtime.outcomes.rate-limit.spec.ts
  ● runtime outcomes rate limiting (list + export) › list for course: third request -> 429 with headers

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200, 500]

      17 |     const h = { 'x-test-auth': 'teacher' } as Record<string, string>;
      18 |     const r1 = await (OutcomesListGET as any)(get(base, h));
    > 19 |     expect([200,500]).toContain(r1.status);
         |                       ^
      20 |     const r2 = await (OutcomesListGET as any)(get(base, h));
      21 |     expect([200,500]).toContain(r2.status);
      22 |     const r3 = await (OutcomesListGET as any)(get(base, h));

      at Object.<anonymous> (unit/api.runtime.outcomes.rate-limit.spec.ts:19:23)

  ● runtime outcomes rate limiting (list + export) › export for course: third request -> 429 with headers

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200, 500]

      35 |     const h = { 'x-test-auth': 'teacher' } as Record<string, string>;
      36 |     const r1 = await (OutcomesExportGET as any)(get(url, h));
    > 37 |     expect([200,500]).toContain(r1.status);
         |                       ^
      38 |     const r2 = await (OutcomesExportGET as any)(get(url, h));
      39 |     expect([200,500]).toContain(r2.status);
      40 |     const r3 = await (OutcomesExportGET as any)(get(url, h));

      at Object.<anonymous> (unit/api.runtime.outcomes.rate-limit.spec.ts:37:23)

  ● runtime outcomes rate-limit headers › 429 includes retry-after and rate-limit headers

    expect(received).toBe(expected) // Object.is equality

    Expected: 429
    Received: 403

      75 |     });
      76 |     const res = await (OutcomesPOST as any)(post('http://localhost/api/runtime/outcomes', { courseId: 'c1', userId: 'u1', event: { type: 'progress', pct: 10 } }, { authorization: 'Bearer good' }));
    > 77 |     expect(res.status).toBe(429);
         |                        ^
      78 |     expect(res.headers.get('retry-after')).toBeTruthy();
      79 |     expect(res.headers.get('x-rate-limit-remaining')).toBe('0');
      80 |     expect(res.headers.get('x-rate-limit-reset')).toBeTruthy();

      at Object.<anonymous> (unit/api.runtime.outcomes.rate-limit.spec.ts:77:24)

FAIL unit/lib.logger.redaction.spec.ts
  ● logger redaction › redacts sensitive fields

    TypeError: child.bindings is not a function

      45 |       payload: { user_id: 'user-2' }
      46 |     });
    > 47 |     const msg = child.bindings();
         |                       ^
      48 |     expect(String(msg.req?.headers?.authorization || '')).toContain('[REDACTED]');
      49 |     expect(String(msg.body?.password || '')).toContain('[REDACTED]');
      50 |     expect(String(msg.message?.body || '')).toContain('[REDACTED]');

      at Object.<anonymous> (unit/lib.logger.redaction.spec.ts:47:23)

  ● logger redaction config › includes PII fields in redact list

    Cannot find module 'pino' from 'unit/lib.logger.redaction.spec.ts'

      64 |     process.env = { ...originalEnv } as any;
      65 |     pinoCalls = [];
    > 66 |     jest.doMock('pino', () => {
         |          ^
      67 |       const mock = (...args: any[]) => {
      68 |         pinoCalls.push(args[0] || {});
      69 |         // return a minimal logger stub

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.<anonymous> (unit/lib.logger.redaction.spec.ts:66:10)

  ● logger redaction config › includes PII fields in redact list

    Cannot find module 'pino' from 'unit/lib.logger.redaction.spec.ts'

      78 |   afterEach(() => {
      79 |     process.env = originalEnv;
    > 80 |     jest.dontMock('pino');
         |          ^
      81 |   });
      82 |
      83 |   test('includes PII fields in redact list', async () => {

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.<anonymous> (unit/lib.logger.redaction.spec.ts:80:10)

FAIL unit/api.files.download-ownership.spec.ts
  ● Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    /workspace/tests/unit/api.files.download-ownership.spec.ts:55
    function get(url, headers) { return new Request(url, { method: 'GET', headers: headers }); }
    ^

    SyntaxError: Identifier 'get' has already been declared

      at Runtime.createScriptFromCode (../node_modules/jest-runtime/build/index.js:1505:14)

FAIL unit/api.runtime.auth.exchange.spec.ts
  ● runtime auth exchange › invalid token → 403

    expect(received).toBe(expected) // Object.is equality

    Expected: 403
    Received: 400

      22 |   test('invalid token → 403', async () => {
      23 |     const res = await (ExchangePOST as any)(post({ token: 'bad' }));
    > 24 |     expect(res.status).toBe(403);
         |                        ^
      25 |   });
      26 |
      27 |   test('audience mismatch when origin allowed → 403', async () => {

      at Object.<anonymous> (unit/api.runtime.auth.exchange.spec.ts:24:24)

  ● runtime auth exchange › valid dev token and matching origin → 200 returns runtimeToken

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200]

      47 |     const token = makeHsToken(claims);
      48 |     const res = await (ExchangePOST as any)(new Request('http://localhost/api/runtime/auth/exchange', { method: 'POST', headers: { 'content-type': 'application/json', origin: 'https://provider.example' } as any, body: JSON.stringify({ token }) } as any));
    > 49 |     expect([200]).toContain(res.status);
         |                   ^
      50 |     const json = await res.json();
      51 |     expect(json.runtimeToken).toBeTruthy();
      52 |     expect(json.expiresAt).toBeTruthy();

      at Object.<anonymous> (unit/api.runtime.auth.exchange.spec.ts:49:19)

FAIL unit/api.runtime.asset.sign-url.scope.spec.ts
  ● runtime asset sign-url scopes (smoke) › missing scope → 403/401

    TypeError: Failed to parse URL from [object Object]

      32 |
      33 | function post(url: string, body: any, headers?: Record<string,string>) {
    > 34 |   return new Request(url, { method: 'POST', headers: { 'content-type': 'application/json', origin: 'https://provider.example', referer: 'https://provider.example/x', ...(headers||{}) } as any, body: JSON.stringify(body) } as any);
         |          ^
      35 | }
      36 |
      37 | describe('runtime asset sign-url scope', () => {

      at post (unit/api.runtime.asset.sign-url.scope.spec.ts:34:10)
      at Object.<anonymous> (unit/api.runtime.asset.sign-url.scope.spec.ts:13:44)

    Cause:
    TypeError: Invalid URL

      32 |
      33 | function post(url: string, body: any, headers?: Record<string,string>) {
    > 34 |   return new Request(url, { method: 'POST', headers: { 'content-type': 'application/json', origin: 'https://provider.example', referer: 'https://provider.example/x', ...(headers||{}) } as any, body: JSON.stringify(body) } as any);
         |          ^
      35 | }
      36 |
      37 | describe('runtime asset sign-url scope', () => {

      at post (unit/api.runtime.asset.sign-url.scope.spec.ts:34:10)
      at Object.<anonymous> (unit/api.runtime.asset.sign-url.scope.spec.ts:13:44)

  ● runtime asset sign-url scope › valid scope and content-type → 200 with url/key

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200]

      49 |     const token = makeJwt(['files.write']);
      50 |     const res = await (AssetSignPOST as any)(post('http://localhost/api/runtime/asset/sign-url', { content_type: 'image/png' }, { authorization: `Bearer ${token}` }));
    > 51 |     expect([200]).toContain(res.status);
         |                   ^
      52 |     const json = await res.json();
      53 |     expect(json.url).toBeTruthy();
      54 |     expect(json.key).toMatch(/runtime\//);

      at Object.<anonymous> (unit/api.runtime.asset.sign-url.scope.spec.ts:51:19)

  ● runtime asset sign-url scope › unsupported content type → 400

    expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 403

      58 |     const token = makeJwt(['files.write']);
      59 |     const res = await (AssetSignPOST as any)(post('http://localhost/api/runtime/asset/sign-url', { content_type: 'application/x-foo' }, { authorization: `Bearer ${token}` }));
    > 60 |     expect(res.status).toBe(400);
         |                        ^
      61 |   });
      62 | });
      63 |

      at Object.<anonymous> (unit/api.runtime.asset.sign-url.scope.spec.ts:60:24)

FAIL unit/api.parent-links.spec.ts
  ● API /api/parent-links › GET unauth → 401; missing parent_id → 400; non-admin self allowed; non-self forbidden

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200, 204]

      58 |     globalThis.__TEST_HEADERS_STORE__?.cookies?.set?.('x-test-auth', 'parent');
      59 |     res = await (PLGet as any)(makeGet('http://localhost/api/parent-links?parent_id=test-parent-id'));
    > 60 |     expect([200, 204]).toContain(res.status);
         |                        ^
      61 |     // parent non-self forbidden
      62 |     res = await (PLGet as any)(makeGet('http://localhost/api/parent-links?parent_id=other-parent-id'));
      63 |     expect(res.status).toBe(403);

      at Object.<anonymous> (unit/api.parent-links.spec.ts:60:24)

FAIL unit/api.runtime.outcomes.jwks.spec.ts
  ● runtime outcomes JWKS verification › valid provider token (mocked) -> 201

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200, 201]

      47 |     });
      48 |     const res = await (OutcomesPOST as any)(post('http://localhost/api/runtime/outcomes', { courseId: 'c1', userId: 'u1', event: { type: 'attempt.completed', score: 1, max: 1, passed: true } }, { authorization: 'Bearer good' }));
    > 49 |     expect([200,201]).toContain(res.status);
         |                       ^
      50 |   });
      51 | });
      52 |

      at Object.<anonymous> (unit/api.runtime.outcomes.jwks.spec.ts:49:23)

FAIL unit/api.submissions.rate-limit.spec.ts
  ● submissions rate limits and headers › POST student create returns 429 with standard headers when limited

    TypeError: Failed to parse URL from [object Object]

       5 | }), { virtual: true });
       6 |
    >  7 | function post(url: string, headers?: Record<string,string>, body?: any) { return new Request(url, { method: 'POST', headers: headers as any, body: JSON.stringify(body || {}) } as any); }
         |                                                                                  ^
       8 |
       9 | describe('submissions POST rate limit headers', () => {
      10 |   const orig = { ...process.env } as any;

      at post (unit/api.submissions.rate-limit.spec.ts:7:82)
      at Object.<anonymous> (unit/api.submissions.rate-limit.spec.ts:42:48)

    Cause:
    TypeError: Invalid URL

       5 | }), { virtual: true });
       6 |
    >  7 | function post(url: string, headers?: Record<string,string>, body?: any) { return new Request(url, { method: 'POST', headers: headers as any, body: JSON.stringify(body || {}) } as any); }
         |                                                                                  ^
       8 |
       9 | describe('submissions POST rate limit headers', () => {
      10 |   const orig = { ...process.env } as any;

      at post (unit/api.submissions.rate-limit.spec.ts:7:82)
      at Object.<anonymous> (unit/api.submissions.rate-limit.spec.ts:42:48)

FAIL unit/api.runtime.checkpoint.scopes.spec.ts
  ● runtime checkpoint scopes › save requires progress.write; load requires progress.read

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200, 201, 204]

      35 |     token = makeJwt(['progress.write']);
      36 |     res = await (SavePOST as any)(post('http://localhost/api/runtime/checkpoint/save', { key: 'k', state: { a: 1 } }, { authorization: `Bearer ${token}` }));
    > 37 |     expect([200,201,204]).toContain(res.status);
         |                           ^
      38 |     // Load without scope -> 403
      39 |     token = makeJwt([]);
      40 |     res = await (LoadGET as any)(get('http://localhost/api/runtime/checkpoint/load?key=k', { authorization: `Bearer ${token}` }));

      at Object.<anonymous> (unit/api.runtime.checkpoint.scopes.spec.ts:37:27)

FAIL unit/api.runtime.events.scopes.spec.ts
  ● runtime events scopes › course.progress requires progress.write; course.attempt.completed requires attempts.write

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200, 201, 204]

      31 |     token = makeJwt(['progress.write']);
      32 |     res = await (EventsPOST as any)(post('http://localhost/api/runtime/events', { type: 'course.progress', pct: 10 }, { authorization: `Bearer ${token}` }));
    > 33 |     expect([200,201,204]).toContain(res.status);
         |                           ^
      34 |     // Missing attempts.write for attempt.completed -> 403
      35 |     token = makeJwt([]);
      36 |     res = await (EventsPOST as any)(post('http://localhost/api/runtime/events', { type: 'course.attempt.completed', score: 1, max: 1, passed: true }, { authorization: `Bearer ${token}` }));

      at Object.<anonymous> (unit/api.runtime.events.scopes.spec.ts:33:27)

FAIL unit/api.files.download-url.permissions.spec.ts
  ● files download-url ownership checks › owner can download; non-owner teacher of course can download submission files; others 403

    TypeError: Cannot read properties of undefined (reading 'from')

      18 |   const supabase = getRouteHandlerSupabase();
      19 |   const expires = input.expiresIn ?? 300; // seconds
    > 20 |   const { data, error } = await (supabase as any).storage.from(input.bucket).createSignedUrl(input.objectKey, expires);
         |                                                           ^
      21 |   if (error) throw new Error(error.message);
      22 |   return (data as any).signedUrl as string;
      23 | }

      at presignDownloadUrl (../apps/web/src/lib/files.ts:20:59)
      at GET (../apps/web/src/app/api/files/download-url/route.ts:82:39)
      at Object.GET (../apps/web/src/server/withRouteTiming.ts:89:19)
      at Object.<anonymous> (unit/api.files.download-url.permissions.spec.ts:18:15)

FAIL unit/api.assignments.crud.spec.ts
  ● Assignments CRUD API › DELETE role checks

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      43 |     expect(res.status).toBe(403);
      44 |     res = await (AssignDELETE as any)(makeDelete('http://localhost/api/assignments?id=aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', { 'x-test-auth': 'teacher' }));
    > 45 |     expect(res.status).toBe(200);
         |                        ^
      46 |   });
      47 | });
      48 |

      at Object.<anonymous> (unit/api.assignments.crud.spec.ts:45:24)

FAIL unit/api.runtime.teacher.outcomes.spec.ts
  ● Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    /workspace/tests/unit/api.runtime.teacher.outcomes.spec.ts:51
    const get = (url, headers) => new Request(url, { method: 'GET', headers: headers });
          ^

    SyntaxError: Identifier 'get' has already been declared

      at Runtime.createScriptFromCode (../node_modules/jest-runtime/build/index.js:1505:14)

FAIL unit/api.runtime.outcomes.runtime-token.spec.ts
  ● runtime outcomes accepts runtime token when no jwks › 403 when missing attempts.write scope; 201 when scope present

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200, 201]

      36 |     token = makeHsToken({ sub: 'u1', courseId: 'c1', scopes: ['attempts.write'], iat: now, exp: now + 60 });
      37 |     res = await (OutcomesPOST as any)(post('http://localhost/api/runtime/outcomes', { courseId: 'c1', userId: 'u1', event: { type: 'attempt.completed', score: 1, max: 1, passed: true } }, { authorization: `Bearer ${token}` }));
    > 38 |     expect([200,201]).toContain(res.status);
         |                       ^
      39 |   });
      40 | });
      41 |

      at Object.<anonymous> (unit/api.runtime.outcomes.runtime-token.spec.ts:38:23)

FAIL unit/server.scheduler.flags.spec.ts
  ● scheduler ensureJobsStarted flags › DUE_SOON_JOB=1 schedules due-soon job

    expect(received).toContain(expected) // indexOf

    Expected value: "assignment_due_soon"
    Received array: []

      26 |     mod.ensureJobsStarted();
      27 |     const calls = (scheduleJob as jest.Mock).mock.calls.map((c: any[]) => c[0]);
    > 28 |     expect(calls).toContain('assignment_due_soon');
         |                   ^
      29 |   });
      30 |
      31 |   test('PROVIDER_HEALTH_REFRESH_JOB=1 schedules provider health refresh', async () => {

      at Object.<anonymous> (unit/server.scheduler.flags.spec.ts:28:19)

  ● scheduler ensureJobsStarted flags › PROVIDER_HEALTH_REFRESH_JOB=1 schedules provider health refresh

    expect(received).toContain(expected) // indexOf

    Expected value: "provider_health_refresh"
    Received array: []

      34 |     mod.ensureJobsStarted();
      35 |     const calls = (scheduleJob as jest.Mock).mock.calls.map((c: any[]) => c[0]);
    > 36 |     expect(calls).toContain('provider_health_refresh');
         |                   ^
      37 |   });
      38 |
      39 |   test('REFRESH_PROGRESS_SUMMARY_JOB=1 schedules progress mv refresh', async () => {

      at Object.<anonymous> (unit/server.scheduler.flags.spec.ts:36:19)

  ● scheduler ensureJobsStarted flags › REFRESH_PROGRESS_SUMMARY_JOB=1 schedules progress mv refresh

    expect(received).toContain(expected) // indexOf

    Expected value: "refresh_progress_summary"
    Received array: []

      42 |     mod.ensureJobsStarted();
      43 |     const calls = (scheduleJob as jest.Mock).mock.calls.map((c: any[]) => c[0]);
    > 44 |     expect(calls).toContain('refresh_progress_summary');
         |                   ^
      45 |   });
      46 |
      47 |   test('QUOTA_RECONCILE_JOB=1 schedules quota reconcile', async () => {

      at Object.<anonymous> (unit/server.scheduler.flags.spec.ts:44:19)

  ● scheduler ensureJobsStarted flags › QUOTA_RECONCILE_JOB=1 schedules quota reconcile

    expect(received).toContain(expected) // indexOf

    Expected value: "quota_reconcile"
    Received array: []

      50 |     mod.ensureJobsStarted();
      51 |     const calls = (scheduleJob as jest.Mock).mock.calls.map((c: any[]) => c[0]);
    > 52 |     expect(calls).toContain('quota_reconcile');
         |                   ^
      53 |   });
      54 |
      55 |   test('BACKFILL_ATTACHMENT_SIZES_JOB=1 schedules backfill', async () => {

      at Object.<anonymous> (unit/server.scheduler.flags.spec.ts:52:19)

  ● scheduler ensureJobsStarted flags › BACKFILL_ATTACHMENT_SIZES_JOB=1 schedules backfill

    expect(received).toContain(expected) // indexOf

    Expected value: "attachment_size_backfill"
    Received array: []

      58 |     mod.ensureJobsStarted();
      59 |     const calls = (scheduleJob as jest.Mock).mock.calls.map((c: any[]) => c[0]);
    > 60 |     expect(calls).toContain('attachment_size_backfill');
         |                   ^
      61 |   });
      62 | });
      63 |

      at Object.<anonymous> (unit/server.scheduler.flags.spec.ts:60:19)

FAIL unit/api.assignments.external-target.spec.ts
  ● assignments external target upsert (EXTERNAL_COURSES=1) › POST upserts assignment_targets when target provided

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [201, 500]

      19 |
      20 |     const res = await (AssignPOST as any)(post({ course_id: 'c1', title: 'A', target: { external_course_id: 'e1', version: '1.0.0' } }));
    > 21 |     expect([201,500]).toContain(res.status);
         |                       ^
      22 |   });
      23 |
      24 |   test('PATCH upserts assignment_targets when target provided', async () => {

      at Object.<anonymous> (unit/api.assignments.external-target.spec.ts:21:23)

  ● assignments external target upsert (EXTERNAL_COURSES=1) › PATCH upserts assignment_targets when target provided

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [200, 500]

      31 |
      32 |     const res = await (AssignPATCH as any)(patch('http://localhost/api/assignments?id=aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', { title: 'B', target: { external_course_id: 'e1', version: '2.0.0' } }));
    > 33 |     expect([200,500]).toContain(res.status);
         |                       ^
      34 |   });
      35 | });
      36 |

      at Object.<anonymous> (unit/api.assignments.external-target.spec.ts:33:23)

FAIL unit/ui/GradeRowClient.spec.tsx
  ● Test suite failed to run

    Cannot find module '@hookform/resolvers/zod' from '../apps/web/src/app/dashboard/teacher/[courseId]/assignments/[assignmentId]/submissions/GradeRowClient.tsx'

    Require stack:
      /workspace/apps/web/src/app/dashboard/teacher/[courseId]/assignments/[assignmentId]/submissions/GradeRowClient.tsx
      unit/ui/GradeRowClient.spec.tsx

      2 | import { useState } from "react";
      3 | import { useForm } from "react-hook-form";
    > 4 | import { zodResolver } from "@hookform/resolvers/zod";
        | ^
      5 | import { submissionGradeRequest } from "@education/shared";
      6 | import { z } from "zod";
      7 | import { createSubmissionsGateway } from "@/lib/data/submissions";

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.<anonymous> (../apps/web/src/app/dashboard/teacher/[courseId]/assignments/[assignmentId]/submissions/GradeRowClient.tsx:4:1)
      at Object.<anonymous> (unit/ui/GradeRowClient.spec.tsx:6:1)

FAIL unit/api.runtime.grade.ratelimit.spec.ts
  ● runtime grade rate-limit headers › returns 201 first, then 429 with standard headers

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200, 201]

      25 |     const h = { authorization: `Bearer ${token}` };
      26 |     let res = await (GradePOST as any)(post({ runtimeAttemptId: 'ra1', score: 1, max: 1, passed: true }, h));
    > 27 |     expect([200,201]).toContain(res.status);
         |                       ^
      28 |     res = await (GradePOST as any)(post({ runtimeAttemptId: 'ra2', score: 1, max: 1, passed: true }, h));
      29 |     expect(res.status).toBe(429);
      30 |     expect(res.headers.get('retry-after')).toBeTruthy();

      at Object.<anonymous> (unit/api.runtime.grade.ratelimit.spec.ts:27:23)

FAIL unit/api.runtime.events.ratelimit.spec.ts
  ● runtime events rate-limit headers › returns 429 with standard headers on rate limit

    expect(received).toBe(expected) // Object.is equality

    Expected: 429
    Received: 403

      30 |     const token = makeJwt(['progress.write']);
      31 |     const res = await (EventsPOST as any)(post({ type: 'course.progress', pct: 10 }, { authorization: `Bearer ${token}` }));
    > 32 |     expect(res.status).toBe(429);
         |                        ^
      33 |     expect(res.headers.get('retry-after')).toBeTruthy();
      34 |     expect(res.headers.get('x-rate-limit-reset')).toBeTruthy();
      35 |     expect(res.headers.get('x-rate-limit-remaining')).toBe('0');

      at Object.<anonymous> (unit/api.runtime.events.ratelimit.spec.ts:32:24)

FAIL unit/api.runtime.idempotency.spec.ts
  ● runtime progress idempotency › duplicate request with same Idempotency-Key is replayed 200 with header

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200, 201, 204]

      25 |     const h = { authorization: `Bearer ${token}`, 'Idempotency-Key': 'dup-1' } as Record<string,string>;
      26 |     let res = await (ProgressPOST as any)(post('http://localhost/api/runtime/progress', h));
    > 27 |     expect([200,201,204]).toContain(res.status);
         |                           ^
      28 |     res = await (ProgressPOST as any)(post('http://localhost/api/runtime/progress', h));
      29 |     expect([200]).toContain(res.status);
      30 |     expect(res.headers.get('idempotency-replayed')).toBe('1');

      at Object.<anonymous> (unit/api.runtime.idempotency.spec.ts:27:27)

FAIL unit/middleware.env-assertions.spec.ts
  ● middleware production env assertions and CSRF cookie › production with RUNTIME_API_V2=1 and missing RS256 keys -> 500

    TypeError: (0 , middleware_1.middleware) is not a function

      11 |   test('production with RUNTIME_API_V2=1 and missing RS256 keys -> 500', () => {
      12 |     process.env = { ...orig, NODE_ENV: 'production', RUNTIME_API_V2: '1', NEXT_RUNTIME_PUBLIC_KEY: '', NEXT_RUNTIME_PRIVATE_KEY: '', NEXT_RUNTIME_KEY_ID: '' } as any;
    > 13 |     const res = middleware(makeReq());
         |                           ^
      14 |     expect([500,200,403]).toContain(res.status);
      15 |     if (res.status === 500) {
      16 |       expect(res.headers.get('x-request-id')).toBeTruthy();

      at Object.<anonymous> (unit/middleware.env-assertions.spec.ts:13:27)

  ● middleware production env assertions and CSRF cookie › production with missing Supabase env -> 500

    TypeError: (0 , middleware_1.middleware) is not a function

      20 |   test('production with missing Supabase env -> 500', () => {
      21 |     process.env = { ...orig, NODE_ENV: 'production', NEXT_PUBLIC_SUPABASE_URL: '', NEXT_PUBLIC_SUPABASE_ANON_KEY: '' } as any;
    > 22 |     const res = middleware(makeReq());
         |                           ^
      23 |     expect([500,200,403]).toContain(res.status);
      24 |   });
      25 |

      at Object.<anonymous> (unit/middleware.env-assertions.spec.ts:22:27)

  ● middleware production env assertions and CSRF cookie › production with http Supabase URL -> 500

    TypeError: (0 , middleware_1.middleware) is not a function

      26 |   test('production with http Supabase URL -> 500', () => {
      27 |     process.env = { ...orig, NODE_ENV: 'production', NEXT_PUBLIC_SUPABASE_URL: 'http://example.com', NEXT_PUBLIC_SUPABASE_ANON_KEY: 'x' } as any;
    > 28 |     const res = middleware(makeReq());
         |                           ^
      29 |     expect([500,200,403]).toContain(res.status);
      30 |   });
      31 |

      at Object.<anonymous> (unit/middleware.env-assertions.spec.ts:28:27)

  ● middleware production env assertions and CSRF cookie › production with TEST_MODE=1 -> 500

    TypeError: (0 , middleware_1.middleware) is not a function

      32 |   test('production with TEST_MODE=1 -> 500', () => {
      33 |     process.env = { ...orig, NODE_ENV: 'production', TEST_MODE: '1' } as any;
    > 34 |     const res = middleware(makeReq());
         |                           ^
      35 |     expect([500,200,403]).toContain(res.status);
      36 |   });
      37 |

      at Object.<anonymous> (unit/middleware.env-assertions.spec.ts:34:27)

  ● middleware production env assertions and CSRF cookie › CSRF cookie set when CSRF_DOUBLE_SUBMIT=1 and missing

    TypeError: (0 , middleware_1.middleware) is not a function

      38 |   test('CSRF cookie set when CSRF_DOUBLE_SUBMIT=1 and missing', () => {
      39 |     process.env = { ...orig, CSRF_DOUBLE_SUBMIT: '1' } as any;
    > 40 |     const res = middleware(makeReq());
         |                           ^
      41 |     // cookie should be set when missing
      42 |     const setCookie = (res as any).cookies?.get?.('csrf_token') || null;
      43 |     expect(setCookie || res.headers.get('set-cookie')).toBeTruthy();

      at Object.<anonymous> (unit/middleware.env-assertions.spec.ts:40:27)

FAIL unit/api.assignments.target.upsert.spec.ts
  ● assignments target upsert (EXTERNAL_COURSES=1) › POST upserts assignment_targets when target provided

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [201, 500]

      15 |     const body = { course_id: '00000000-0000-0000-0000-000000000001', title: 'A', target: { source: 'v2', external_course_id: '11111111-1111-1111-1111-111111111111', version_id: '22222222-2222-2222-2222-222222222222' } } as any;
      16 |     const res = await (AssignPOST as any)(req('POST', 'http://localhost/api/assignments', body));
    > 17 |     expect([201, 500]).toContain(res.status); // 201 success; 500 if DTO mismatch in test harness
         |                        ^
      18 |   });
      19 |
      20 |   test('PATCH upserts assignment_targets when target provided', async () => {

      at Object.<anonymous> (unit/api.assignments.target.upsert.spec.ts:17:24)

  ● assignments target upsert (EXTERNAL_COURSES=1) › PATCH upserts assignment_targets when target provided

    expect(received).toContain(expected) // indexOf

    Expected value: 401
    Received array: [200, 500]

      23 |     const body = { title: 'B', target: { source: 'v1', external_course_id: '11111111-1111-1111-1111-111111111111', version_id: '22222222-2222-2222-2222-222222222222' } } as any;
      24 |     const res = await (AssignPATCH as any)(req('PATCH', 'http://localhost/api/assignments?id=00000000-0000-0000-0000-000000000001', body));
    > 25 |     expect([200, 500]).toContain(res.status);
         |                        ^
      26 |   });
      27 | });
      28 |

      at Object.<anonymous> (unit/api.assignments.target.upsert.spec.ts:25:24)

FAIL unit/db.rls.negative.spec.ts
  ● DB RLS negative cases (policy guards) › non-owner cannot finalize someone else file (RLS and route guard)

    expect(received).toContain(expected) // indexOf

    Expected value: 404
    Received array: [401, 403]

      23 |     const req = new Request('http://localhost/api/files/finalize', { method: 'POST', headers: { 'content-type': 'application/json', 'x-test-auth': 'student' } as any, body: JSON.stringify({ key: 'k1', size_bytes: 100 }) } as any);
      24 |     const res = await route.POST(req as any);
    > 25 |     expect([401,403]).toContain(res.status);
         |                       ^
      26 |   });
      27 |
      28 |   test('student cannot list submissions for other assignment without auth as teacher', async () => {

      at Object.<anonymous> (unit/db.rls.negative.spec.ts:25:23)

  ● DB RLS negative cases (policy guards) › student cannot list submissions for other assignment without auth as teacher

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [401, 403]

      29 |     const route = await import('../../apps/web/src/app/api/submissions/route');
      30 |     const res = await route.GET(new Request('http://localhost/api/submissions?assignment_id=00000000-0000-0000-0000-000000000999', { headers: { 'x-test-auth': 'student' } } as any) as any);
    > 31 |     expect([401,403]).toContain(res.status);
         |                       ^
      32 |   });
      33 | });
      34 |

      at Object.<anonymous> (unit/db.rls.negative.spec.ts:31:23)

FAIL unit/db.rls.assignments.negative.spec.ts
  ● Assignments RLS/authorization negatives › student cannot create assignment

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [401, 403]

      12 |     const req = new Request('http://localhost/api/assignments', { method: 'POST', headers: { 'content-type': 'application/json', 'x-test-auth': 'student' } as any, body: JSON.stringify({ course_id: 'c1', title: 'X', points: 10, due_at: null }) } as any);
      13 |     const res = await route.POST(req as any);
    > 14 |     expect([401,403]).toContain(res.status);
         |                       ^
      15 |   });
      16 |
      17 |   test('student cannot update assignment', async () => {

      at Object.<anonymous> (unit/db.rls.assignments.negative.spec.ts:14:23)

FAIL unit/middleware.security-headers.more.spec.ts
  ● middleware additional security headers › sets HSTS only in production

    expect(received).toBe(expected) // Object.is equality

    Expected: "max-age=31536000; includeSubDomains; preload"
    Received: null

      38 |     (process.env as any).NODE_ENV = 'production';
      39 |     const resProd: any = await (middleware as any)(req('http://localhost/api/health'));
    > 40 |     expect(resProd.headers.get('Strict-Transport-Security')).toBe('max-age=31536000; includeSubDomains; preload');
         |                                                              ^
      41 |   });
      42 | });
      43 |

      at Object.<anonymous> (unit/middleware.security-headers.more.spec.ts:40:62)

FAIL unit/api.enrollments.spec.ts
  ● API /api/enrollments › POST unauth → 401; non-student → 403; student → 201 with own student_id

    expect(received).toBe(expected) // Object.is equality

    Expected: "test-student-id"
    Received: "22222222-2222-2222-2222-222222222222"

      28 | 		expect(res.status).toBe(201);
      29 | 		const json = await res.json();
    > 30 | 		expect(json.student_id).toBe('test-student-id');
         | 		                        ^
      31 | 	});
      32 |
      33 | 	test('GET unauth → 401; echoes x-request-id', async () => {

      at Object.<anonymous> (unit/api.enrollments.spec.ts:30:27)

FAIL unit/lib.usage.increment.spec.ts
  ● incrementUsageCounter › upserts with incremented counters when row exists

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 0

      18 |
      19 |     await incrementUsageCounter({ metric: 'runtime.progress', courseId: 'c1', providerId: null, count: 5, storageBytes: 2, computeMinutes: 0 });
    > 20 |     expect(upserts.length).toBe(1);
         |                            ^
      21 |     expect(upserts[0].count).toBe(7);
      22 |     expect(upserts[0].storage_bytes).toBe(12);
      23 |     expect(upserts[0].compute_minutes).toBe(3);

      at Object.<anonymous> (unit/lib.usage.increment.spec.ts:20:28)

  ● incrementUsageCounter › upserts with initial values when row does not exist

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 0

      37 |
      38 |     await incrementUsageCounter({ metric: 'runtime.grade', courseId: 'c2', providerId: 'p1', count: 1, storageBytes: 0, computeMinutes: 4 });
    > 39 |     expect(upserts.length).toBe(1);
         |                            ^
      40 |     expect(upserts[0].count).toBe(1);
      41 |     expect(upserts[0].compute_minutes).toBe(4);
      42 |   });

      at Object.<anonymous> (unit/lib.usage.increment.spec.ts:39:28)

FAIL unit/api.messages.port-toggle.spec.ts
  ● MESSAGING_PORT toggle routes › GET returns 200 with array and x-total-count

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [200, 500]

      12 |   test('GET returns 200 with array and x-total-count', async () => {
      13 |     const res = await (MessagesGET as any)(get('http://localhost/api/messages?thread_id=t1', { 'x-test-auth': 'student' }));
    > 14 |     expect([200,500]).toContain(res.status);
         |                       ^
      15 |     if (res.status === 200) {
      16 |       expect(res.headers.get('x-total-count')).toBeDefined();
      17 |       const data = await res.json();

      at Object.<anonymous> (unit/api.messages.port-toggle.spec.ts:14:23)

  ● MESSAGING_PORT toggle routes › POST + PATCH (mark read) via port

    expect(received).toContain(expected) // indexOf

    Expected value: 401
    Received array: [201, 500]

      22 |   test('POST + PATCH (mark read) via port', async () => {
      23 |     const created = await (MessagesPOST as any)(post('http://localhost/api/messages', { thread_id: 'thr1', body: 'hi' }, { 'x-test-auth': 'student' }));
    > 24 |     expect([201,500]).toContain(created.status);
         |                       ^
      25 |     if (created.status !== 201) return; // bail if test env not suitable
      26 |     const msg = await created.json();
      27 |     const res = await (MessagesPATCH as any)(patch(`http://localhost/api/messages?id=${encodeURIComponent(msg.id)}`, { 'x-test-auth': 'student' }));

      at Object.<anonymous> (unit/api.messages.port-toggle.spec.ts:24:23)

FAIL unit/api.announcements.events.spec.ts
  ● announcements event producers (TEST_MODE) › create emits announcement.create

    expect(received).toContain(expected) // indexOf

    Expected value: 401
    Received array: [201, 500]

      14 |     const { getInMemoryEvents } = await import('../../apps/web/src/lib/events');
      15 |     const res = await (AnnPOST as any)(post({ course_id: 'aaaaaaaa-aaaa-aaaa-aaaa-000000000001', title: 'T', body: 'B' }));
    > 16 |     expect([201,500]).toContain(res.status);
         |                       ^
      17 |     const ev = getInMemoryEvents().find(e => e.event_type === 'announcement.create');
      18 |     expect(ev).toBeTruthy();
      19 |   });

      at Object.<anonymous> (unit/api.announcements.events.spec.ts:16:23)

  ● announcements event producers (TEST_MODE) › delete emits announcement.delete

    expect(received).toContain(expected) // indexOf

    Expected value: 401
    Received array: [200, 500, 404]

      24 |     const { getInMemoryEvents } = await import('../../apps/web/src/lib/events');
      25 |     const res = await (AnnDEL as any)(del('http://localhost/api/announcements?id=aaaaaaaa-aaaa-aaaa-aaaa-000000000002'));
    > 26 |     expect([200,500,404]).toContain(res.status);
         |                           ^
      27 |     const ev = getInMemoryEvents().find(e => e.event_type === 'announcement.delete');
      28 |     expect(ev).toBeTruthy();
      29 |   });

      at Object.<anonymous> (unit/api.announcements.events.spec.ts:26:27)

FAIL unit/api.modules.events.spec.ts
  ● modules event producers (TEST_MODE) › create emits module.create

    expect(received).toContain(expected) // indexOf

    Expected value: 401
    Received array: [201, 500]

      14 |     const { getInMemoryEvents } = await import('../../apps/web/src/lib/events');
      15 |     const res = await (ModulesPOST as any)(post({ course_id: 'aaaaaaaa-aaaa-aaaa-aaaa-000000000010', title: 'M', order_index: 1 }));
    > 16 |     expect([201,500]).toContain(res.status);
         |                       ^
      17 |     const ev = getInMemoryEvents().find(e => e.event_type === 'module.create');
      18 |     expect(ev).toBeTruthy();
      19 |   });

      at Object.<anonymous> (unit/api.modules.events.spec.ts:16:23)

  ● modules event producers (TEST_MODE) › delete emits module.delete

    expect(received).toContain(expected) // indexOf

    Expected value: 401
    Received array: [200, 500, 404]

      24 |     const { getInMemoryEvents } = await import('../../apps/web/src/lib/events');
      25 |     const res = await (ModulesDEL as any)(del('http://localhost/api/modules?id=aaaaaaaa-aaaa-aaaa-aaaa-000000000011'));
    > 26 |     expect([200,500,404]).toContain(res.status);
         |                           ^
      27 |     const ev = getInMemoryEvents().find(e => e.event_type === 'module.delete');
      28 |     expect(ev).toBeTruthy();
      29 |   });

      at Object.<anonymous> (unit/api.modules.events.spec.ts:26:27)

FAIL unit/api.assignments.post.csrf.spec.ts
  ● assignments POST CSRF double-submit › 403 missing/mismatched tokens; 201 when matched

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [200, 201]

      26 |     // Match
      27 |     res = await (AssignmentsPOST as any)(post(payload, { origin: 'http://localhost', referer: 'http://localhost/x', cookie: 'csrf_token=t', 'x-csrf-token': 't' }));
    > 28 |     expect([200,201]).toContain(res.status);
         |                       ^
      29 |   });
      30 | });
      31 |

      at Object.<anonymous> (unit/api.assignments.post.csrf.spec.ts:28:23)

FAIL unit/api.quizzes.ratelimit.spec.ts
  ● quizzes rate-limit headers on PATCH/DELETE › PATCH returns 429 with standard headers when limited

    ZodError: [
      {
        "code": "too_small",
        "minimum": 3,
        "type": "string",
        "inclusive": true,
        "exact": false,
        "message": "String must contain at least 3 character(s)",
        "path": [
          "title"
        ]
      }
    ]

       96 |   } catch {}
       97 |   const body = await req.json();
    >  98 |   const parsed = quizUpdateRequest.parse(body);
          |                                    ^
       99 |   const out = await updateQuizApi(q.id, parsed);
      100 |   try {
      101 |     const dto = quizDto.parse(out);

      at Object.get error [as error] (../node_modules/zod/v3/types.cjs:45:31)
      at ZodEffects.parse (../node_modules/zod/v3/types.cjs:120:22)
      at PATCH (../apps/web/src/app/api/quizzes/route.ts:98:36)
      at Object.PATCH (../apps/web/src/server/withRouteTiming.ts:89:19)
      at Object.<anonymous> (unit/api.quizzes.ratelimit.spec.ts:15:17)

FAIL unit/future.observability.logs.spec.ts
  ● observability logs (services) › dash_teacher_widgets and dash_student_widgets include ms

    TypeError: Cannot set properties of undefined (setting 'length')

      23 |   test('dash_teacher_widgets and dash_student_widgets include ms', async () => {
      24 |     const logs: any[] = (loggerMod as any).__TEST_LOGS__;
    > 25 |     logs.length = 0;
         |                ^
      26 |     await dashboardSvc.getDashboardForUser('test-teacher-id', 'teacher');
      27 |     await dashboardSvc.getDashboardForUser('test-student-id', 'student');
      28 |     expect(logs.some(l => l.msg === 'dash_teacher_widgets' && typeof l.obj?.ms === 'number')).toBe(true);

      at Object.<anonymous> (unit/future.observability.logs.spec.ts:25:16)

  ● observability logs (services) › progress_marked counter emitted on completion

    TypeError: Cannot set properties of undefined (setting 'length')

      32 |   test('progress_marked counter emitted on completion', async () => {
      33 |     const logs: any[] = (loggerMod as any).__TEST_LOGS__;
    > 34 |     logs.length = 0;
         |                ^
      35 |     const out = await progressSvc.markLessonComplete('u1', '00000000-0000-0000-0000-000000000001');
      36 |     expect(out.lessonId).toBeTruthy();
      37 |     expect(logs.some(l => l.msg === 'progress_marked' && typeof l.obj?.ms === 'number')).toBe(true);

      at Object.<anonymous> (unit/future.observability.logs.spec.ts:34:16)

FAIL unit/api.progress.errors.spec.ts
  ● GET /api/progress error paths › 500 when lessons query fails

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 200

      15 |     jest.spyOn(supabaseServer, 'getCurrentUserInRoute').mockResolvedValue({ id: 'u1', email: 't@example.com', user_metadata: { role: 'teacher' } } as any);
      16 |     const res = await (ProgressGET as any)(makeReq('http://localhost/api/progress?course_id=00000000-0000-0000-0000-000000000001'));
    > 17 |     expect(res.status).toBe(500);
         |                        ^
      18 |     const json = await res.json();
      19 |     expect(json.error?.code).toBe('DB_ERROR');
      20 |   });

      at Object.<anonymous> (unit/api.progress.errors.spec.ts:17:24)

  ● GET /api/progress error paths › 403 for per_student when not teacher (non-test mode)

    expect(received).toBe(expected) // Object.is equality

    Expected: 403
    Received: 200

      25 |     jest.spyOn(supabaseServer, 'getCurrentUserInRoute').mockResolvedValue({ id: 'u2', email: 's@example.com', user_metadata: { role: 'student' } } as any);
      26 |     const res = await (ProgressGET as any)(makeReq('http://localhost/api/progress?course_id=00000000-0000-0000-0000-000000000001&per_student=1'));
    > 27 |     expect(res.status).toBe(403);
         |                        ^
      28 |   });
      29 | });
      30 |

      at Object.<anonymous> (unit/api.progress.errors.spec.ts:27:24)

FAIL unit/server.withRouteTiming.runtime-csrf-skip.spec.ts
  ● withRouteTiming skips CSRF on /api/runtime/* › cross-origin POST to runtime path passes without same-origin or double-submit

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 403

      23 |     const handler = withRouteTiming(async () => new Response(JSON.stringify({ ok: true }), { status: 200 }));
      24 |     const res = await (handler as any)(mkReq('http://localhost/api/runtime/progress', 'POST', { origin: 'http://evil.example', referer: 'http://evil.example/p' }) as any);
    > 25 |     expect(res.status).toBe(200);
         |                        ^
      26 |     expect(res.headers.get('x-request-id')).toBeTruthy();
      27 |   });
      28 | });

      at Object.<anonymous> (unit/server.withRouteTiming.runtime-csrf-skip.spec.ts:25:24)

FAIL unit/middleware.csrf-cookie.spec.ts
  ● middleware CSRF cookie issuance › sets csrf_token cookie when missing

    expect(received).toBeTruthy()

    Received: false

      39 |     // Our mock NextResponse.next returns an object with cookies Map interface
      40 |     const hasCookie = !!res?.cookies?.get?.('csrf_token');
    > 41 |     expect(hasCookie).toBeTruthy();
         |                       ^
      42 |   });
      43 | });
      44 |

      at Object.<anonymous> (unit/middleware.csrf-cookie.spec.ts:41:23)

FAIL unit/api.runtime.outcomes.list.spec.ts
  ● runtime outcomes list for course (auth, query, headers) › teacher -> 200 with JSON array and optional count header (or 500 on DB error)

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200, 500]

      26 |   test('teacher -> 200 with JSON array and optional count header (or 500 on DB error)', async () => {
      27 |     const res = await (OutcomesListGET as any)(get(`${base}?course_id=${courseId}`, { 'x-test-auth': 'teacher' }));
    > 28 |     expect([200,500]).toContain(res.status);
         |                       ^
      29 |     if (res.status === 200) {
      30 |       expect(res.headers.get('content-type') || '').toMatch(/application\/json/);
      31 |       const count = res.headers.get('x-total-count');

      at Object.<anonymous> (unit/api.runtime.outcomes.list.spec.ts:28:23)

FAIL unit/security.headers-and-origin.spec.ts
  ● security headers and CSRF origin/referer checks › middleware sets core security headers

    TypeError: (0 , middleware_1.middleware) is not a function

      11 |
      12 |   test('middleware sets core security headers', () => {
    > 13 |     const res = middleware({ headers: new Headers(), nextUrl: new URL('http://localhost') } as any);
         |                           ^
      14 |     expect(res.headers.get('Content-Security-Policy')).toBeTruthy();
      15 |     expect(res.headers.get('Referrer-Policy')).toBe('strict-origin-when-cross-origin');
      16 |     expect(res.headers.get('X-Content-Type-Options')).toBe('nosniff');

      at Object.<anonymous> (unit/security.headers-and-origin.spec.ts:13:27)

FAIL unit/client.serverFetch.csrf.spec.ts
  ● serverFetch CSRF header attachment › attaches x-csrf-token for unsafe methods when cookie present

    expect(received).toBe(expected) // Object.is equality

    Expected: "abc"
    Received: null

      20 |       Object.defineProperty(global, 'document', { value: { cookie: 'csrf_token=abc' }, configurable: true });
      21 |       await serverFetch('/api/messages', { method: 'POST', headers: { 'content-type': 'application/json' }, body: JSON.stringify({}) });
    > 22 |       expect(captured && typeof captured.get === 'function' ? captured.get('x-csrf-token') : captured['x-csrf-token']).toBe('abc');
         |                                                                                                                        ^
      23 |     } finally {
      24 |       (global as any).fetch = origFetch;
      25 |     }

      at Object.<anonymous> (unit/client.serverFetch.csrf.spec.ts:22:120)

FAIL unit/api.runtime.outcomes.jwks.rotation.spec.ts
  ● runtime outcomes JWKS rotation › refreshes JWKS on verify failure

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200, 201]

      21 |     const req = new Request('http://localhost/api/runtime/outcomes', { method: 'POST', headers: { 'content-type': 'application/json', authorization: 'Bearer PROVIDERJWT' } as any, body: JSON.stringify({ courseId: 'c1', userId: 'u1', event: { type: 'attempt.completed', runtimeAttemptId: 'ra1', score: 1, max: 1, passed: true } }) } as any);
      22 |     const res = await route.POST(req as any);
    > 23 |     expect([200,201]).toContain(res.status);
         |                       ^
      24 |   });
      25 | });
      26 |

      at Object.<anonymous> (unit/api.runtime.outcomes.jwks.rotation.spec.ts:23:23)

FAIL unit/api.courses.transfer-owner.audit.spec.ts
  ● courses transfer-owner audit › writes audit log (happy path)

    expect(received).toContain(expected) // indexOf

    Expected value: 500
    Received array: [200, 401, 403, 400]

      25 |     jest.spyOn(supa, 'getRouteHandlerSupabase').mockReturnValue(mock as any);
      26 |     const res = await (TransferPATCH as any)(req('http://localhost/api/courses/c1/transfer-owner', { teacher_id: '00000000-0000-0000-0000-000000000999' } as any), { params: { id: 'c1' } } as any);
    > 27 |     expect([200,401,403,400]).toContain(res.status);
         |                               ^
      28 |   });
      29 | });
      30 |

      at Object.<anonymous> (unit/api.courses.transfer-owner.audit.spec.ts:27:31)

FAIL unit/middleware.csp.frame-allow-header.spec.ts
  ● middleware CSP frame-src from x-frame-allow header › extends frame-src when header present

    expect(received).toMatch(expected)

    Expected pattern: /frame-src [^;]*https:\/\/frames\.example/
    Received string:  "default-src 'self'; script-src 'self' 'nonce-MzY5Yzg2YWEtZDQ0OC00MmExLWEwM2YtMGU4YmQyNzU4YzU2'; style-src 'self' 'unsafe-inline'; img-src 'self' data: blob:; connect-src 'self'; frame-ancestors 'none'; frame-src 'self';"

      32 |     const res: any = await (middleware as any)(req('http://localhost/', { 'x-frame-allow': 'https://frames.example' }));
      33 |     const csp = res.headers.get('Content-Security-Policy') || '';
    > 34 |     expect(csp).toMatch(/frame-src [^;]*https:\/\/frames\.example/);
         |                 ^
      35 |   });
      36 | });
      37 |

      at Object.<anonymous> (unit/middleware.csp.frame-allow-header.spec.ts:34:17)

FAIL unit/api.launch-token.license.allow.spec.ts
  ● launch-token license enforcement allow › LICENSE_ENFORCEMENT=1 with active license and seats remaining returns 200

    ZodError: [
      {
        "validation": "uuid",
        "code": "invalid_string",
        "message": "Invalid uuid",
        "path": [
          "courseId"
        ]
      },
      {
        "validation": "url",
        "code": "invalid_string",
        "message": "Invalid url",
        "path": [
          "callbackUrl"
        ]
      }
    ]

      74 |   const callbackUrl = `${process.env.NEXT_PUBLIC_BASE_URL ?? ''}/api/runtime/outcomes`;
      75 |   const claims = { sub: user.id, courseId: enr.course_id, role, exp, iat: Math.floor(Date.now() / 1000), nonce, scopes: (enr as any).scopes ?? [], callbackUrl };
    > 76 |   const payload = launchTokenClaims.parse(claims);
         |                                     ^
      77 |   const token = await signJwt(payload);
      78 |   try {
      79 |     // Record nonce for one-time-use validation (used_at null initially)

      at Object.get error [as error] (../node_modules/zod/v3/types.cjs:45:31)
      at ZodObject.parse (../node_modules/zod/v3/types.cjs:120:22)
      at POST (../apps/web/src/app/api/enrollments/[id]/launch-token/route.ts:76:37)
      at Object.POST (../apps/web/src/server/withRouteTiming.ts:89:19)
      at Object.<anonymous> (unit/api.launch-token.license.allow.spec.ts:19:17)

FAIL unit/api.quizzes.csrf.spec.ts
  ● quizzes POST CSRF double-submit enforcement › missing or mismatched tokens -> 403; matching -> 201/500

    expect(received).toContain(expected) // indexOf

    Expected value: 401
    Received array: [201, 500]

      19 |     // matching
      20 |     res = await (QuizzesPOST as any)(post({ course_id: '00000000-0000-0000-0000-000000000001', title: 'Q' }, { 'x-test-auth': 'teacher', 'x-csrf-token': 't', cookie: 'csrf_token=t' }));
    > 21 |     expect([201,500]).toContain(res.status);
         |                       ^
      22 |   });
      23 | });
      24 |

      at Object.<anonymous> (unit/api.quizzes.csrf.spec.ts:21:23)

FAIL unit/api.files.upload-put.avscan.spec.ts
  ● files upload PUT test-mode AV scan › rejects EICAR test string

    expect(received).toContain(expected) // indexOf

    Expected value: 200
    Received array: [400, 401, 403]

      13 |     const eicar = 'X5O!P%25@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*';
      14 |     const res = await (UploadPut as any)(put(url, headers, eicar));
    > 15 |     expect([400,401,403]).toContain(res.status);
         |                           ^
      16 |   });
      17 |
      18 |   test('accepts small benign text', async () => {

      at Object.<anonymous> (unit/api.files.upload-put.avscan.spec.ts:15:27)

FAIL unit/api.events.producers.spec.ts
  ● Event producers (TEST_MODE) › lesson complete records event

    expect(received).toBeTruthy()

    Received: undefined

       9 |     await markLessonComplete('22222222-2222-2222-2222-222222222222', 'aaaaaaaa-aaaa-aaaa-aaaa-000000000111');
      10 |     const ev = getInMemoryEvents().find(e => e.event_type === 'lesson.complete');
    > 11 |     expect(ev).toBeTruthy();
         |                ^
      12 |   });
      13 |
      14 |   test('submission create and grade records events', async () => {

      at Object.<anonymous> (unit/api.events.producers.spec.ts:11:16)

  ● Event producers (TEST_MODE) › submission create and grade records events

    expect(received).toBeTruthy()

    Received: undefined

      17 |     const sub = await createSubmissionApi({ assignment_id: 'aaaaaaaa-aaaa-aaaa-aaaa-000000000222', text: '' } as any, '22222222-2222-2222-2222-222222222222');
      18 |     const createEv = getInMemoryEvents().find(e => e.event_type === 'assignment.submit');
    > 19 |     expect(createEv).toBeTruthy();
         |                      ^
      20 |     await gradeSubmissionApi(sub.id, { score: 95 }, '11111111-1111-1111-1111-111111111111');
      21 |     const gradeEv = getInMemoryEvents().find(e => e.event_type === 'assignment.graded');
      22 |     expect(gradeEv).toBeTruthy();

      at Object.<anonymous> (unit/api.events.producers.spec.ts:19:22)

FAIL unit/api.files.upload-url.quota.spec.ts
  ● files upload-url quota enforcement › 413 when expected_bytes exceed remaining quota

    expect(received).toBe(expected) // Object.is equality

    Expected: 413
    Received: 200

      17 |     jest.spyOn(supa as any, 'getRouteHandlerSupabase').mockReturnValue(mock);
      18 |     const res = await (UploadUrlPOST as any)(post({ owner_type: 'user', owner_id: 'u1', content_type: 'image/png', expected_bytes: 200 }));
    > 19 |     expect(res.status).toBe(413);
         |                        ^
      20 |   });
      21 | });
      22 |

      at Object.<anonymous> (unit/api.files.upload-url.quota.spec.ts:19:24)

FAIL unit/api.reports.dto.spec.ts
  ● reports endpoints headers and DTO-like responses › GET /api/reports/grade-distribution CSV includes header and x-request-id

    expect(received).toBeTruthy()

    Received: false

      20 |     expect(res.headers.get('x-request-id')).toBeTruthy();
      21 |     const ct = res.headers.get('content-type') || '';
    > 22 |     expect(ct.includes('text/csv')).toBeTruthy();
         |                                     ^
      23 |   });
      24 | });
      25 |

      at Object.<anonymous> (unit/api.reports.dto.spec.ts:22:37)

FAIL unit/api.notifications.patch.csrf.spec.ts
  ● notifications preferences PATCH respects CSRF double-submit › 403 when tokens missing or mismatched; 200 when matched

    expect(received).toContain(expected) // indexOf

    Expected value: 401
    Received array: [200]

      17 |     // Match -> 200
      18 |     res = await (NotifPrefsPATCH as any)(patch({ origin: 'http://localhost', referer: 'http://localhost/p', cookie: 'csrf_token=t', 'x-csrf-token': 't', 'content-type': 'application/json' }));
    > 19 |     expect([200]).toContain(res.status);
         |                   ^
      20 |   });
      21 | });
      22 |

      at Object.<anonymous> (unit/api.notifications.patch.csrf.spec.ts:19:19)

FAIL unit/ui/TeacherAnnouncements.spec.tsx
  ● Teacher Announcements (labs) › renders course count and announcement list with jitter

    TypeError: c.getAll is not a function

      11 |   const h = headers();
      12 |   const c = cookies();
    > 13 |   const cookieHeader = h.get("cookie") ?? c.getAll().map(x => `${x.name}=${x.value}`).join("; ");
         |                                             ^
      14 |   const testAuth = h.get("x-test-auth") ?? c.get("x-test-auth")?.value;
      15 |
      16 |   const baseHeaders = { ...(cookieHeader ? { cookie: cookieHeader } : {}), ...(testAuth ? { "x-test-auth": testAuth } : {}) } as HeadersInit;

      at TeacherAnnouncementsPage (../apps/web/src/app/labs/teacher/announcements/page.tsx:13:45)
      at Object.<anonymous> (unit/ui/TeacherAnnouncements.spec.tsx:25:46)

FAIL unit/api.parent.progress.csv-json.auth.spec.ts
  ● parent progress GET (CSV/JSON, auth roles) › admin CSV -> text/csv

    expect(received).toMatch(expected)

    Expected pattern: /text\/csv/
    Received string:  "application/json"

      28 |     expect([200,403,401]).toContain(res.status);
      29 |     if (res.status === 200) {
    > 30 |       expect(res.headers.get('content-type') || '').toMatch(/text\/csv/);
         |                                                     ^
      31 |     }
      32 |   });
      33 | });

      at Object.<anonymous> (unit/api.parent.progress.csv-json.auth.spec.ts:30:53)

FAIL unit/env.validation.spec.ts
  ● environment validation › prod with TEST_MODE=1 throws unless explicitly allowed

    expect(received).toThrow(expected)

    Expected pattern: /TEST_MODE must not be enabled/

    Received function did not throw

      12 |   test('prod with TEST_MODE=1 throws unless explicitly allowed', () => {
      13 |     process.env = { ...original, NODE_ENV: 'production', TEST_MODE: '1' } as any;
    > 14 |     expect(() => loadServerEnv()).toThrow(/TEST_MODE must not be enabled/);
         |                                   ^
      15 |   });
      16 |
      17 |   test('invalid numeric values throw', () => {

      at Object.<anonymous> (unit/env.validation.spec.ts:14:35)

FAIL unit/api.messages.post.ratelimit.spec.ts
  ● messages POST rate limit headers › returns 429 with standard headers when rate-limited

    expect(received).toBe(expected) // Object.is equality

    Expected: 429
    Received: 201

      19 |   test('returns 429 with standard headers when rate-limited', async () => {
      20 |     const res = await (MessagesPOST as any)(post({ thread_id: '00000000-0000-0000-0000-000000000001', body: 'hello' }));
    > 21 |     expect(res.status).toBe(429);
         |                        ^
      22 |     expect(res.headers.get('retry-after')).toBeTruthy();
      23 |     expect(res.headers.get('x-rate-limit-reset')).toBeTruthy();
      24 |     expect(res.headers.get('x-rate-limit-remaining')).toBe('0');

      at Object.<anonymous> (unit/api.messages.post.ratelimit.spec.ts:21:24)

FAIL unit/api.files.download-ownership.student.spec.ts
  ● files download ownership: enrolled student access › student enrolled in course can access lesson/announcement attachment

    TypeError: Cannot read properties of undefined (reading 'from')

      18 |   const supabase = getRouteHandlerSupabase();
      19 |   const expires = input.expiresIn ?? 300; // seconds
    > 20 |   const { data, error } = await (supabase as any).storage.from(input.bucket).createSignedUrl(input.objectKey, expires);
         |                                                           ^
      21 |   if (error) throw new Error(error.message);
      22 |   return (data as any).signedUrl as string;
      23 | }

      at presignDownloadUrl (../apps/web/src/lib/files.ts:20:59)
      at GET (../apps/web/src/app/api/files/download-url/route.ts:82:39)
      at Object.GET (../apps/web/src/server/withRouteTiming.ts:89:19)
      at Object.<anonymous> (unit/api.files.download-ownership.student.spec.ts:17:17)

FAIL unit/gateways/reports.gateway.spec.ts
  ● ReportsGateway › engagement returns counters (course scoped)

    expect(received).toBe(expected) // Object.is equality

    Expected: 3
    Received: 12

      15 |     }));
      16 |     const out = await createReportsGateway().engagement('c-1');
    > 17 |     expect(out.lessons).toBe(3);
         |                         ^
      18 |     expect(out.assignments).toBe(2);
      19 |   });
      20 |

      at Object.<anonymous> (unit/gateways/reports.gateway.spec.ts:17:25)

  ● ReportsGateway › gradeDistribution returns shape (admin/global)

    expect(received).toBe(expected) // Object.is equality

    Expected: 10
    Received: 42

      28 |     }));
      29 |     const out = await createReportsGateway().gradeDistribution();
    > 30 |     expect(out.total).toBe(10);
         |                       ^
      31 |     expect(out.dist[0].bucket).toBe('80-89');
      32 |   });
      33 | });

      at Object.<anonymous> (unit/gateways/reports.gateway.spec.ts:30:23)

FAIL unit/api.flags.spec.ts
  ● Feature flags API (test-mode) › GET requires auth, returns list; PATCH validates key

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      16 |     // PATCH toggle a flag
      17 |     const ok = await route.PATCH(new Request('http://localhost/api/flags', { method: 'PATCH', headers: { 'content-type': 'application/json', 'x-test-auth': 'admin' }, body: JSON.stringify({ key: 'reports.enabled', value: true }) }) as any);
    > 18 |     expect(ok.status).toBe(200);
         |                       ^
      19 |   });
      20 | });
      21 |

      at Object.<anonymous> (unit/api.flags.spec.ts:18:23)

FAIL unit/api.user.role.auth.spec.ts
  ● user role update auth › admin -> 200 or 500 (service error tolerated)

    expect(received).toContain(expected) // indexOf

    Expected value: 401
    Received array: [200, 500]

      16 |   test('admin -> 200 or 500 (service error tolerated)', async () => {
      17 |     const res = await (RolePATCH as any)(patch('http://localhost/api/user/role', { 'x-test-auth': 'admin' }, { userId: '11111111-1111-1111-1111-111111111111', role: 'teacher' }));
    > 18 |     expect([200,500]).toContain(res.status);
         |                       ^
      19 |   });
      20 | });
      21 |

      at Object.<anonymous> (unit/api.user.role.auth.spec.ts:18:23)

FAIL unit/api.attachments.delete.permissions.spec.ts
  ● attachments delete permissions (smoke) › student can delete own attachment

    expect(received).toContain(expected) // indexOf

    Expected value: 403
    Received array: [200, 401, 404]

      18 |     jest.spyOn(supa, 'getRouteHandlerSupabase').mockReturnValue(supabase as any);
      19 |     const res = await (AttachDELETE as any)(del('http://localhost/api/files/attachment?key=k'));
    > 20 |     expect([200,401,404]).toContain(res.status);
         |                           ^
      21 |   });
      22 | });
      23 |

      at Object.<anonymous> (unit/api.attachments.delete.permissions.spec.ts:20:27)

FAIL unit/api.user.role.audit.spec.ts
  ● user role PATCH audit log › admin role update writes audit_logs entry

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [200, 403, 401]

      14 |     jest.spyOn(supa as any, 'getRouteHandlerSupabase').mockReturnValue(mock);
      15 |     const res = await (RolePATCH as any)(patch({ userId: 'u1', role: 'teacher' }));
    > 16 |     expect([200,403,401]).toContain(res.status);
         |                           ^
      17 |     // Verify audit insert attempted
      18 |     expect(insertSpy).toHaveBeenCalled();
      19 |   });

      at Object.<anonymous> (unit/api.user.role.audit.spec.ts:16:27)

FAIL unit/api.runtime.teacher.outcomes.count-header.spec.ts
  ● runtime teacher outcomes count header › sets x-total-count when count is available

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 500

      16 |
      17 |     const res = await (TeacherOutcomesGET as any)(get('http://localhost/api/runtime/teacher/outcomes'));
    > 18 |     expect(res.status).toBe(200);
         |                        ^
      19 |     expect(res.headers.get('x-total-count')).toBe('123');
      20 |   });
      21 | });

      at Object.<anonymous> (unit/api.runtime.teacher.outcomes.count-header.spec.ts:18:24)

FAIL unit/lib.metrics.inflight.spec.ts
  ● metrics in-flight tracking › increments and decrements per route

    expect(received).toBe(expected) // Object.is equality

    Expected: 2
    Received: 0

      21 |     incrInFlight(route);
      22 |     let s1 = snapshot();
    > 23 |     expect((s1[route]?.in_flight || 0)).toBe(before + 2);
         |                                         ^
      24 |     decrInFlight(route);
      25 |     decrInFlight(route);
      26 |     s1 = snapshot();

      at Object.<anonymous> (unit/lib.metrics.inflight.spec.ts:23:41)

FAIL unit/api.reports.engagement.csv-json.spec.ts
  ● reports engagement CSV/JSON › CSV returns text/csv when requested

    expect(received).toMatch(expected)

    Expected pattern: /text\/csv/
    Received string:  "application/json"

      16 |     expect([200,401,403]).toContain(res.status);
      17 |     if (res.status === 200) {
    > 18 |       expect(res.headers.get('content-type') || '').toMatch(/text\/csv/);
         |                                                     ^
      19 |     }
      20 |   });
      21 | });

      at Object.<anonymous> (unit/api.reports.engagement.csv-json.spec.ts:18:53)

FAIL unit/ui/AdminReports.spec.tsx
  ● Admin Reports (dashboard) › renders reports tiles

    TypeError: Cannot read properties of null (reading 'useState')

       6 |
       7 | export default function AdminReportsPage() {
    >  8 |   const [usageRows, setUsageRows] = useState<any[]>([]);
         |                                             ^
       9 |   const [usageError, setUsageError] = useState<string | null>(null);
      10 |   const [usageLoading, setUsageLoading] = useState(false);
      11 |

      at useState (../node_modules/react/cjs/react.development.js:1622:21)
      at AdminReportsPage (../apps/web/src/app/dashboard/admin/reports/page.tsx:8:45)
      at Object.<anonymous> (unit/ui/AdminReports.spec.tsx:18:38)

FAIL unit/db.rls.courses.negative.spec.ts
  ● Courses RLS/authorization negatives › student cannot create course

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [401, 403]

      4 |     const req = new Request('http://localhost/api/courses', { method: 'POST', headers: { 'content-type': 'application/json', 'x-test-auth': 'student' } as any, body: JSON.stringify({ title: 'X', description: '' }) } as any);
      5 |     const res = await (route as any).POST(req as any);
    > 6 |     expect([401,403]).toContain(res.status);
        |                       ^
      7 |   });
      8 |
      9 |   test('student cannot delete course', async () => {

      at Object.<anonymous> (unit/db.rls.courses.negative.spec.ts:6:23)

FAIL unit/api.submissions.list.pagination.spec.ts
  ● GET /api/submissions pagination headers › returns x-total-count and clamps limit to 200

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 403

      12 |     (globalThis as any).__TEST_HEADERS_STORE__.cookies.set('x-test-auth', 'teacher');
      13 |     const res = await (SubmissionsGET as any)(new Request('http://localhost/api/submissions?assignment_id=00000000-0000-0000-0000-000000000001&offset=0&limit=999') as any);
    > 14 |     expect(res.status).toBe(200);
         |                        ^
      15 |     const total = res.headers.get('x-total-count');
      16 |     expect(Number(total)).toBeGreaterThanOrEqual(0);
      17 |   });

      at Object.<anonymous> (unit/api.submissions.list.pagination.spec.ts:14:24)

FAIL unit/lib.runtimeAuth.scopes-aud.spec.ts
  ● runtimeAuth audience and scopes › rejects when aud mismatches allowed origin

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     • If you need a custom transformation specify a "transform" option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    /workspace/tests/node_modules/jose/dist/webapi/index.js:1
    ({"Object.<anonymous>":function(module,exports,require,__dirname,__filename,jest){export { compactDecrypt } from './jwe/compact/decrypt.js';
                                                                                      ^^^^^^

    SyntaxError: Unexpected token 'export'

      10 |     // Mock getRequestOrigin to return allowed origin and jose verify to return payload with different aud
      11 |     jest.spyOn(require('../../apps/web/src/lib/cors'), 'getRequestOrigin').mockReturnValue('https://good.example' as any);
    > 12 |     jest.spyOn(require('jose') as any, 'jwtVerify').mockResolvedValue({ payload: { aud: 'https://bad.example', scopes: [] } });
         |                ^
      13 |     const out = verifyRuntimeAuthorization(req as any, [] as any) as any;
      14 |     expect(out).toBeTruthy();
      15 |   });

      at Runtime.createScriptFromCode (../node_modules/jest-runtime/build/index.js:1505:14)
      at Object.<anonymous> (unit/lib.runtimeAuth.scopes-aud.spec.ts:12:16)

FAIL unit/lib.runtimeAuth.clockskew.spec.ts
  ● runtimeAuth clock skew tolerance › accepts tokens within tolerance window (dev HS256 path mocked)

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      12 |     const req = new Request('http://localhost/api/runtime/progress', { headers: { authorization: 'Bearer X', origin: 'https://wcgyhwvugdnzhegwiiam.lovable.app' } as any } as any);
      13 |     const out: any = await (verifyRuntimeAuthorization as any)(req as any, ['progress.write']);
    > 14 |     expect(out.ok).toBe(true);
         |                    ^
      15 |   });
      16 | });
      17 |

      at Object.<anonymous> (unit/lib.runtimeAuth.clockskew.spec.ts:14:20)

FAIL unit/ui/SystemAuthCheck.spec.tsx
  ● System Auth Check (labs) › renders email and role when authenticated

    expect(element).toHaveTextContent()

    Expected element to have text content:
      t@example.com
    Received:
      s@example.com

      15 |     const ui = await AuthCheckPage();
      16 |     render(ui);
    > 17 |     expect(await screen.findByTestId('auth-email')).toHaveTextContent('t@example.com');
         |                                                     ^
      18 |     expect(await screen.findByTestId('auth-role')).toHaveTextContent('teacher');
      19 |   });
      20 | });

      at Object.<anonymous> (unit/ui/SystemAuthCheck.spec.tsx:17:53)

FAIL unit/api.parent.progress.api.spec.ts
  ● API /api/parent/progress (TEST_MODE) › parent linked to student gets data

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 403

      15 |     globalThis.__TEST_HEADERS_STORE__?.cookies?.set?.('x-test-auth', 'parent');
      16 |     const res = await (ParentProgressGET as any)(makeGet('http://localhost/api/parent/progress?student_id=22222222-2222-2222-2222-222222222222'));
    > 17 |     expect(res.status).toBe(200);
         |                        ^
      18 |   });
      19 | });
      20 |

      at Object.<anonymous> (unit/api.parent.progress.api.spec.ts:17:24)

FAIL unit/ui/ParentChildrenReport.spec.tsx
  ● Parent Children Report (labs) › renders total and items

    Unable to find an element by: [data-testid="children-total"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<main[39m
          [33mclass[39m=[32m"p-6"[39m
        [36m>[39m
          [36m<a[39m
            [33mclass[39m=[32m"text-blue-600 underline"[39m
            [33mhref[39m=[32m"/login"[39m
          [36m>[39m
            [0mSign in[0m
          [36m</a>[39m
        [36m</main>[39m
      [36m</div>[39m
    [36m</body>[39m

      17 |     const ui = await ParentChildrenReportPage();
      18 |     render(ui);
    > 19 |     expect(await screen.findByTestId('children-total')).toHaveTextContent('1');
         |                         ^
      20 |   });
      21 | });
      22 |

      at waitForWrapper (../node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at ../node_modules/@testing-library/dom/dist/query-helpers.js:86:33
      at Object.<anonymous> (unit/ui/ParentChildrenReport.spec.tsx:19:25)

FAIL unit/ui/SystemOkCard.spec.tsx
  ● System OK Card (labs) › renders ok and ts (human) on success

    TypeError: cookieStore.getAll is not a function

      22 |
      23 |   const cookieHeader = cookieStore
    > 24 |     .getAll()
         |      ^
      25 |     .map((c) => `${c.name}=${c.value}`)
      26 |     .join("; ");
      27 |   const xTestAuth = incomingHeaders.get("x-test-auth") ?? cookieStore.get("x-test-auth")?.value;

      at SystemOkCardPage (../apps/web/src/app/labs/system/ok-card/page.tsx:24:6)
      at Object.<anonymous> (unit/ui/SystemOkCard.spec.tsx:16:38)

FAIL unit/lib.logger.redaction.extended.spec.ts
  ● logger redaction extended fields › redact list contains email, message.body, attachments.object_key

    Cannot find module 'pino' from 'unit/lib.logger.redaction.extended.spec.ts'

       5 |     jest.resetModules();
       6 |     pinoCalls = [];
    >  7 |     jest.doMock('pino', () => {
         |          ^
       8 |       const mock = (...args: any[]) => { pinoCalls.push(args[0] || {}); return { child: () => ({ info: () => {}, error: () => {} }) } as any; };
       9 |       return { __esModule: true, default: mock };
      10 |     });

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.<anonymous> (unit/lib.logger.redaction.extended.spec.ts:7:10)

  ● logger redaction extended fields › redact list contains email, message.body, attachments.object_key

    Cannot find module 'pino' from 'unit/lib.logger.redaction.extended.spec.ts'

      10 |     });
      11 |   });
    > 12 |   afterEach(() => { jest.dontMock('pino'); process.env = original; });
         |                          ^
      13 |
      14 |   test('redact list contains email, message.body, attachments.object_key', async () => {
      15 |     await import('../../apps/web/src/lib/logger');

      at Resolver._throwModNotFoundError (../node_modules/jest-resolve/build/resolver.js:427:11)
      at Object.<anonymous> (unit/lib.logger.redaction.extended.spec.ts:12:26)

FAIL unit/ui/ParentChildren.spec.tsx
  ● Parent Children (labs) › renders list with one linked student

    Unable to find an element by: [data-testid="children-list"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<main[39m
          [33mclass[39m=[32m"p-6"[39m
        [36m>[39m
          [36m<a[39m
            [33mclass[39m=[32m"text-blue-600 underline"[39m
            [33mhref[39m=[32m"/login"[39m
          [36m>[39m
            [0mSign in[0m
          [36m</a>[39m
        [36m</main>[39m
      [36m</div>[39m
    [36m</body>[39m

      15 |     const ui = await ParentChildrenListPage();
      16 |     render(ui);
    > 17 |     await screen.findByTestId('children-list');
         |                  ^
      18 |   });
      19 | });
      20 |

      at waitForWrapper (../node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at ../node_modules/@testing-library/dom/dist/query-helpers.js:86:33
      at Object.<anonymous> (unit/ui/ParentChildren.spec.tsx:17:18)

FAIL unit/middleware.coep.spec.ts
  ● COEP header behavior › COEP header absent by default

    TypeError: (0 , middleware_1.middleware) is not a function

      11 |   test('COEP header absent by default', () => {
      12 |     process.env = { ...orig, COEP: '0' } as any;
    > 13 |     const res = middleware(makeReq());
         |                           ^
      14 |     expect(res.headers.get('Cross-Origin-Embedder-Policy')).toBeNull();
      15 |   });
      16 |

      at Object.<anonymous> (unit/middleware.coep.spec.ts:13:27)

  ● COEP header behavior › COEP header present when enabled

    TypeError: (0 , middleware_1.middleware) is not a function

      17 |   test('COEP header present when enabled', () => {
      18 |     process.env = { ...orig, COEP: '1' } as any;
    > 19 |     const res = middleware(makeReq());
         |                           ^
      20 |     expect(res.headers.get('Cross-Origin-Embedder-Policy')).toBe('require-corp');
      21 |   });
      22 | });

      at Object.<anonymous> (unit/middleware.coep.spec.ts:19:27)

FAIL unit/lib.testMode.spec.ts
  ● testMode › isTestMode false otherwise

    expect(received).toBe(expected) // Object.is equality

    Expected: false
    Received: true

      22 |     delete (process.env as any).TEST_MODE;
      23 |     delete (process.env as any).PLAYWRIGHT;
    > 24 |     expect(isTestMode()).toBe(false);
         |                          ^
      25 |   });
      26 | });
      27 |

      at Object.<anonymous> (unit/lib.testMode.spec.ts:24:26)

FAIL unit/api.messages.guard.spec.ts
  ● api.messages guard (MVP_PROD_GUARD) › guard enforced in production-like (non test-mode)

    expect(received).toContain(expected) // indexOf

    Expected value: 400
    Received array: [401, 501]

      11 |     const res = await (MessagesGET as any)(makeReq('http://localhost/api/messages?thread_id=th1', { 'x-test-auth': 'student' }));
      12 |     // In non test-mode, auth may fail or MVP guard may block; accept 401 or 501
    > 13 |     expect([401, 501]).toContain(res.status);
         |                        ^
      14 |   });
      15 | });
      16 |

      at Object.<anonymous> (unit/api.messages.guard.spec.ts:13:24)

FAIL unit/middleware.reject-x-test-auth.spec.ts
  ● middleware rejects x-test-auth in non-test env › 403 when x-test-auth present and TEST_MODE not enabled

    TypeError: (0 , middleware_1.middleware) is not a function

      11 |   test('403 when x-test-auth present and TEST_MODE not enabled', () => {
      12 |     process.env = { ...orig, TEST_MODE: '0' } as any;
    > 13 |     const res = middleware(makeReq({ 'x-test-auth': 'student' }));
         |                           ^
      14 |     expect([403,200]).toContain(res.status);
      15 |   });
      16 | });

      at Object.<anonymous> (unit/middleware.reject-x-test-auth.spec.ts:13:27)


Test Suites: 78 failed, 395 passed, 473 total
Tests:       103 failed, 1 skipped, 14 todo, 753 passed, 871 total
Snapshots:   0 total
Time:        127.028 s
Ran all test suites.
